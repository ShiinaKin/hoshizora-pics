/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IoSakurasouControllerRequestUserManageInsertRequest,
  IoSakurasouControllerRequestUserManagePatchRequest,
  IoSakurasouControllerRequestUserSelfPatchRequest,
  IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVO,
  IoSakurasouControllerVoCommonResponseKotlinUnit,
  IoSakurasouControllerVoPageResultIoSakurasouControllerVoUserPageVO,
} from '../models/index';
import {
    IoSakurasouControllerRequestUserManageInsertRequestFromJSON,
    IoSakurasouControllerRequestUserManageInsertRequestToJSON,
    IoSakurasouControllerRequestUserManagePatchRequestFromJSON,
    IoSakurasouControllerRequestUserManagePatchRequestToJSON,
    IoSakurasouControllerRequestUserSelfPatchRequestFromJSON,
    IoSakurasouControllerRequestUserSelfPatchRequestToJSON,
    IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVOFromJSON,
    IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVOToJSON,
    IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON,
    IoSakurasouControllerVoCommonResponseKotlinUnitToJSON,
    IoSakurasouControllerVoPageResultIoSakurasouControllerVoUserPageVOFromJSON,
    IoSakurasouControllerVoPageResultIoSakurasouControllerVoUserPageVOToJSON,
} from '../models/index';

export interface ApiUserBanIdPatchRequest {
    id: number;
}

export interface ApiUserManageIdDeleteRequest {
    id: number;
}

export interface ApiUserManageIdGetRequest {
    id: number;
}

export interface ApiUserManageIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestUserManagePatchRequest: IoSakurasouControllerRequestUserManagePatchRequest;
}

export interface ApiUserManagePageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiUserManagePostRequest {
    ioSakurasouControllerRequestUserManageInsertRequest: IoSakurasouControllerRequestUserManageInsertRequest;
}

export interface ApiUserSelfPatchRequest {
    ioSakurasouControllerRequestUserSelfPatchRequest: IoSakurasouControllerRequestUserSelfPatchRequest;
}

export interface ApiUserUnbanIdPatchRequest {
    id: number;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async apiUserBanIdPatchRaw(requestParameters: ApiUserBanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserBanIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/ban/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserBanIdPatch(requestParameters: ApiUserBanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiUserBanIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserManageIdDeleteRaw(requestParameters: ApiUserManageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserManageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserManageIdDelete(requestParameters: ApiUserManageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiUserManageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserManageIdGetRaw(requestParameters: ApiUserManageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserManageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserManageIdGet(requestParameters: ApiUserManageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVO> {
        const response = await this.apiUserManageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * modify any user
     */
    async apiUserManageIdPatchRaw(requestParameters: ApiUserManageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserManageIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestUserManagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserManagePatchRequest',
                'Required parameter "ioSakurasouControllerRequestUserManagePatchRequest" was null or undefined when calling apiUserManageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserManagePatchRequestToJSON(requestParameters['ioSakurasouControllerRequestUserManagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     * modify any user
     */
    async apiUserManageIdPatch(requestParameters: ApiUserManageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiUserManageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserManagePageGetRaw(requestParameters: ApiUserManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultIoSakurasouControllerVoUserPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiUserManagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiUserManagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultIoSakurasouControllerVoUserPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserManagePageGet(requestParameters: ApiUserManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultIoSakurasouControllerVoUserPageVO> {
        const response = await this.apiUserManagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * admin manual add user
     */
    async apiUserManagePostRaw(requestParameters: ApiUserManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestUserManageInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserManageInsertRequest',
                'Required parameter "ioSakurasouControllerRequestUserManageInsertRequest" was null or undefined when calling apiUserManagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserManageInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestUserManageInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     * admin manual add user
     */
    async apiUserManagePost(requestParameters: ApiUserManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiUserManagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSelfGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserSelfGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoUserVO> {
        const response = await this.apiUserSelfGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * modify self
     */
    async apiUserSelfPatchRaw(requestParameters: ApiUserSelfPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestUserSelfPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserSelfPatchRequest',
                'Required parameter "ioSakurasouControllerRequestUserSelfPatchRequest" was null or undefined when calling apiUserSelfPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/self`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserSelfPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestUserSelfPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     * modify self
     */
    async apiUserSelfPatch(requestParameters: ApiUserSelfPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiUserSelfPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserUnbanIdPatchRaw(requestParameters: ApiUserUnbanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserUnbanIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/unban/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUnbanIdPatch(requestParameters: ApiUserUnbanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiUserUnbanIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
