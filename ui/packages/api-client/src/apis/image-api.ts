/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseImageManageVO } from '../models';
// @ts-ignore
import type { CommonResponseImageVO } from '../models';
// @ts-ignore
import type { CommonResponseKotlinString } from '../models';
// @ts-ignore
import type { CommonResponseKotlinUnit } from '../models';
// @ts-ignore
import type { CommonResponsePageResultImagePageVO } from '../models';
// @ts-ignore
import type { ImageManagePatchRequest } from '../models';
// @ts-ignore
import type { ImagePatchRequest } from '../models';
/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdDelete: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageImageIdDelete', 'imageId', imageId)
            const localVarPath = `/api/image/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/image/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdInfoGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageImageIdInfoGet', 'imageId', imageId)
            const localVarPath = `/api/image/{imageId}/info`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {ImagePatchRequest} imagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdPatch: async (imageId: number, imagePatchRequest: ImagePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageImageIdPatch', 'imageId', imageId)
            // verify required parameter 'imagePatchRequest' is not null or undefined
            assertParamExists('apiImageImageIdPatch', 'imagePatchRequest', imagePatchRequest)
            const localVarPath = `/api/image/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdThumbnailGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageImageIdThumbnailGet', 'imageId', imageId)
            const localVarPath = `/api/image/{imageId}/thumbnail`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdDelete: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageManageImageIdDelete', 'imageId', imageId)
            const localVarPath = `/api/image/manage/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageManageImageIdGet', 'imageId', imageId)
            const localVarPath = `/api/image/manage/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdInfoGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageManageImageIdInfoGet', 'imageId', imageId)
            const localVarPath = `/api/image/manage/{imageId}/info`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {ImageManagePatchRequest} imageManagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdPatch: async (imageId: number, imageManagePatchRequest: ImageManagePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageManageImageIdPatch', 'imageId', imageId)
            // verify required parameter 'imageManagePatchRequest' is not null or undefined
            assertParamExists('apiImageManageImageIdPatch', 'imageManagePatchRequest', imageManagePatchRequest)
            const localVarPath = `/api/image/manage/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageManagePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdThumbnailGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageManageImageIdThumbnailGet', 'imageId', imageId)
            const localVarPath = `/api/image/manage/{imageId}/thumbnail`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {number} [userId] albumId
         * @param {number} [albumId] albumId
         * @param {boolean} [isPrivate] isPrivate
         * @param {string} [search] search content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManagePageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, userId?: number, albumId?: number, isPrivate?: boolean, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiImageManagePageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiImageManagePageGet', 'pageSize', pageSize)
            const localVarPath = `/api/image/manage/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['albumId'] = albumId;
            }

            if (isPrivate !== undefined) {
                localVarQueryParameter['isPrivate'] = isPrivate;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {number} [albumId] albumId
         * @param {boolean} [isPrivate] isPrivate
         * @param {string} [search] search content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImagePageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, albumId?: number, isPrivate?: boolean, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiImagePageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiImagePageGet', 'pageSize', pageSize)
            const localVarPath = `/api/image/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (albumId !== undefined) {
                localVarQueryParameter['albumId'] = albumId;
            }

            if (isPrivate !== undefined) {
                localVarQueryParameter['isPrivate'] = isPrivate;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImagePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImageIdDelete(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImageIdDelete(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageImageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImageIdGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImageIdGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImageIdInfoGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseImageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImageIdInfoGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageImageIdInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {ImagePatchRequest} imagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImageIdPatch(imageId: number, imagePatchRequest: ImagePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImageIdPatch(imageId, imagePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageImageIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImageIdThumbnailGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImageIdThumbnailGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageImageIdThumbnailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageManageImageIdDelete(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageManageImageIdDelete(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageManageImageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageManageImageIdGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageManageImageIdGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageManageImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageManageImageIdInfoGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseImageManageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageManageImageIdInfoGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageManageImageIdInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {ImageManagePatchRequest} imageManagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageManageImageIdPatch(imageId: number, imageManagePatchRequest: ImageManagePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageManageImageIdPatch(imageId, imageManagePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageManageImageIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} imageId image id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageManageImageIdThumbnailGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageManageImageIdThumbnailGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageManageImageIdThumbnailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {number} [userId] albumId
         * @param {number} [albumId] albumId
         * @param {boolean} [isPrivate] isPrivate
         * @param {string} [search] search content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageManagePageGet(page: number, pageSize: number, order?: string, orderBy?: string, userId?: number, albumId?: number, isPrivate?: boolean, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultImagePageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageManagePageGet(page, pageSize, order, orderBy, userId, albumId, isPrivate, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImageManagePageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {number} [albumId] albumId
         * @param {boolean} [isPrivate] isPrivate
         * @param {string} [search] search content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImagePageGet(page: number, pageSize: number, order?: string, orderBy?: string, albumId?: number, isPrivate?: boolean, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultImagePageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImagePageGet(page, pageSize, order, orderBy, albumId, isPrivate, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImagePageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImagePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImagePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.apiImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @param {ImageApiApiImageImageIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdDelete(requestParameters: ImageApiApiImageImageIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiImageImageIdDelete(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageImageIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdGet(requestParameters: ImageApiApiImageImageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.apiImageImageIdGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageImageIdInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdInfoGet(requestParameters: ImageApiApiImageImageIdInfoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseImageVO> {
            return localVarFp.apiImageImageIdInfoGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageImageIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdPatch(requestParameters: ImageApiApiImageImageIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiImageImageIdPatch(requestParameters.imageId, requestParameters.imagePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageImageIdThumbnailGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdThumbnailGet(requestParameters: ImageApiApiImageImageIdThumbnailGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.apiImageImageIdThumbnailGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageManageImageIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdDelete(requestParameters: ImageApiApiImageManageImageIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiImageManageImageIdDelete(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageManageImageIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdGet(requestParameters: ImageApiApiImageManageImageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.apiImageManageImageIdGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageManageImageIdInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdInfoGet(requestParameters: ImageApiApiImageManageImageIdInfoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseImageManageVO> {
            return localVarFp.apiImageManageImageIdInfoGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageManageImageIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdPatch(requestParameters: ImageApiApiImageManageImageIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiImageManageImageIdPatch(requestParameters.imageId, requestParameters.imageManagePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageManageImageIdThumbnailGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManageImageIdThumbnailGet(requestParameters: ImageApiApiImageManageImageIdThumbnailGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.apiImageManageImageIdThumbnailGet(requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImageManagePageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageManagePageGet(requestParameters: ImageApiApiImageManagePageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultImagePageVO> {
            return localVarFp.apiImageManagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.userId, requestParameters.albumId, requestParameters.isPrivate, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageApiApiImagePageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImagePageGet(requestParameters: ImageApiApiImagePageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultImagePageVO> {
            return localVarFp.apiImagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.albumId, requestParameters.isPrivate, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImagePost(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinString> {
            return localVarFp.apiImagePost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiImageImageIdDelete operation in ImageApi.
 * @export
 * @interface ImageApiApiImageImageIdDeleteRequest
 */
export interface ImageApiApiImageImageIdDeleteRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageImageIdDelete
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageImageIdGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageImageIdGetRequest
 */
export interface ImageApiApiImageImageIdGetRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageImageIdGet
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageImageIdInfoGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageImageIdInfoGetRequest
 */
export interface ImageApiApiImageImageIdInfoGetRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageImageIdInfoGet
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageImageIdPatch operation in ImageApi.
 * @export
 * @interface ImageApiApiImageImageIdPatchRequest
 */
export interface ImageApiApiImageImageIdPatchRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageImageIdPatch
     */
    readonly imageId: number

    /**
     * 
     * @type {ImagePatchRequest}
     * @memberof ImageApiApiImageImageIdPatch
     */
    readonly imagePatchRequest: ImagePatchRequest
}

/**
 * Request parameters for apiImageImageIdThumbnailGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageImageIdThumbnailGetRequest
 */
export interface ImageApiApiImageImageIdThumbnailGetRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageImageIdThumbnailGet
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageManageImageIdDelete operation in ImageApi.
 * @export
 * @interface ImageApiApiImageManageImageIdDeleteRequest
 */
export interface ImageApiApiImageManageImageIdDeleteRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageManageImageIdDelete
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageManageImageIdGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageManageImageIdGetRequest
 */
export interface ImageApiApiImageManageImageIdGetRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageManageImageIdGet
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageManageImageIdInfoGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageManageImageIdInfoGetRequest
 */
export interface ImageApiApiImageManageImageIdInfoGetRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageManageImageIdInfoGet
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageManageImageIdPatch operation in ImageApi.
 * @export
 * @interface ImageApiApiImageManageImageIdPatchRequest
 */
export interface ImageApiApiImageManageImageIdPatchRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageManageImageIdPatch
     */
    readonly imageId: number

    /**
     * 
     * @type {ImageManagePatchRequest}
     * @memberof ImageApiApiImageManageImageIdPatch
     */
    readonly imageManagePatchRequest: ImageManagePatchRequest
}

/**
 * Request parameters for apiImageManageImageIdThumbnailGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageManageImageIdThumbnailGetRequest
 */
export interface ImageApiApiImageManageImageIdThumbnailGetRequest {
    /**
     * image id
     * @type {number}
     * @memberof ImageApiApiImageManageImageIdThumbnailGet
     */
    readonly imageId: number
}

/**
 * Request parameters for apiImageManagePageGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImageManagePageGetRequest
 */
export interface ImageApiApiImageManagePageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly orderBy?: string

    /**
     * albumId
     * @type {number}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly userId?: number

    /**
     * albumId
     * @type {number}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly albumId?: number

    /**
     * isPrivate
     * @type {boolean}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly isPrivate?: boolean

    /**
     * search content
     * @type {string}
     * @memberof ImageApiApiImageManagePageGet
     */
    readonly search?: string
}

/**
 * Request parameters for apiImagePageGet operation in ImageApi.
 * @export
 * @interface ImageApiApiImagePageGetRequest
 */
export interface ImageApiApiImagePageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof ImageApiApiImagePageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof ImageApiApiImagePageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof ImageApiApiImagePageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof ImageApiApiImagePageGet
     */
    readonly orderBy?: string

    /**
     * albumId
     * @type {number}
     * @memberof ImageApiApiImagePageGet
     */
    readonly albumId?: number

    /**
     * isPrivate
     * @type {boolean}
     * @memberof ImageApiApiImagePageGet
     */
    readonly isPrivate?: boolean

    /**
     * search content
     * @type {string}
     * @memberof ImageApiApiImagePageGet
     */
    readonly search?: string
}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @param {ImageApiApiImageImageIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageImageIdDelete(requestParameters: ImageApiApiImageImageIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageImageIdDelete(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageImageIdGet(requestParameters: ImageApiApiImageImageIdGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageImageIdGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageImageIdInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageImageIdInfoGet(requestParameters: ImageApiApiImageImageIdInfoGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageImageIdInfoGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageImageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageImageIdPatch(requestParameters: ImageApiApiImageImageIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageImageIdPatch(requestParameters.imageId, requestParameters.imagePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageImageIdThumbnailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageImageIdThumbnailGet(requestParameters: ImageApiApiImageImageIdThumbnailGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageImageIdThumbnailGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageManageImageIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageManageImageIdDelete(requestParameters: ImageApiApiImageManageImageIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageManageImageIdDelete(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageManageImageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageManageImageIdGet(requestParameters: ImageApiApiImageManageImageIdGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageManageImageIdGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageManageImageIdInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageManageImageIdInfoGet(requestParameters: ImageApiApiImageManageImageIdInfoGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageManageImageIdInfoGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageManageImageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageManageImageIdPatch(requestParameters: ImageApiApiImageManageImageIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageManageImageIdPatch(requestParameters.imageId, requestParameters.imageManagePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageManageImageIdThumbnailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageManageImageIdThumbnailGet(requestParameters: ImageApiApiImageManageImageIdThumbnailGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageManageImageIdThumbnailGet(requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImageManagePageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageManagePageGet(requestParameters: ImageApiApiImageManagePageGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImageManagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.userId, requestParameters.albumId, requestParameters.isPrivate, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageApiApiImagePageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImagePageGet(requestParameters: ImageApiApiImagePageGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.albumId, requestParameters.isPrivate, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImagePost(options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).apiImagePost(options).then((request) => request(this.axios, this.basePath));
    }
}

