/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseKotlinUnit } from '../models';
// @ts-ignore
import type { CommonResponsePageResultStrategyPageVO } from '../models';
// @ts-ignore
import type { CommonResponseStrategyVO } from '../models';
// @ts-ignore
import type { StrategyInsertRequest } from '../models';
// @ts-ignore
import type { StrategyPatchRequest } from '../models';
/**
 * StrategyApi - axios parameter creator
 * @export
 */
export const StrategyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStrategyIdDelete', 'id', id)
            const localVarPath = `/api/strategy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStrategyIdGet', 'id', id)
            const localVarPath = `/api/strategy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id strategy id
         * @param {StrategyPatchRequest} strategyPatchRequest &#x60;config&#x60; need a extra field &#x60;type&#x60;, same to strategyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyIdPatch: async (id: number, strategyPatchRequest: StrategyPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStrategyIdPatch', 'id', id)
            // verify required parameter 'strategyPatchRequest' is not null or undefined
            assertParamExists('apiStrategyIdPatch', 'strategyPatchRequest', strategyPatchRequest)
            const localVarPath = `/api/strategy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(strategyPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyPageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiStrategyPageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiStrategyPageGet', 'pageSize', pageSize)
            const localVarPath = `/api/strategy/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StrategyInsertRequest} strategyInsertRequest &#x60;config&#x60; need a extra field &#x60;type&#x60;, same to strategyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyPost: async (strategyInsertRequest: StrategyInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'strategyInsertRequest' is not null or undefined
            assertParamExists('apiStrategyPost', 'strategyInsertRequest', strategyInsertRequest)
            const localVarPath = `/api/strategy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(strategyInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StrategyApi - functional programming interface
 * @export
 */
export const StrategyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StrategyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStrategyIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStrategyIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.apiStrategyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStrategyIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseStrategyVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStrategyIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.apiStrategyIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id strategy id
         * @param {StrategyPatchRequest} strategyPatchRequest &#x60;config&#x60; need a extra field &#x60;type&#x60;, same to strategyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStrategyIdPatch(id: number, strategyPatchRequest: StrategyPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStrategyIdPatch(id, strategyPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.apiStrategyIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStrategyPageGet(page: number, pageSize: number, order?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultStrategyPageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStrategyPageGet(page, pageSize, order, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.apiStrategyPageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {StrategyInsertRequest} strategyInsertRequest &#x60;config&#x60; need a extra field &#x60;type&#x60;, same to strategyType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStrategyPost(strategyInsertRequest: StrategyInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStrategyPost(strategyInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StrategyApi.apiStrategyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StrategyApi - factory interface
 * @export
 */
export const StrategyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StrategyApiFp(configuration)
    return {
        /**
         * 
         * @param {StrategyApiApiStrategyIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyIdDelete(requestParameters: StrategyApiApiStrategyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiStrategyIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiApiStrategyIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyIdGet(requestParameters: StrategyApiApiStrategyIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseStrategyVO> {
            return localVarFp.apiStrategyIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiApiStrategyIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyIdPatch(requestParameters: StrategyApiApiStrategyIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiStrategyIdPatch(requestParameters.id, requestParameters.strategyPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiApiStrategyPageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyPageGet(requestParameters: StrategyApiApiStrategyPageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultStrategyPageVO> {
            return localVarFp.apiStrategyPageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StrategyApiApiStrategyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStrategyPost(requestParameters: StrategyApiApiStrategyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiStrategyPost(requestParameters.strategyInsertRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiStrategyIdDelete operation in StrategyApi.
 * @export
 * @interface StrategyApiApiStrategyIdDeleteRequest
 */
export interface StrategyApiApiStrategyIdDeleteRequest {
    /**
     * strategy id
     * @type {number}
     * @memberof StrategyApiApiStrategyIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiStrategyIdGet operation in StrategyApi.
 * @export
 * @interface StrategyApiApiStrategyIdGetRequest
 */
export interface StrategyApiApiStrategyIdGetRequest {
    /**
     * strategy id
     * @type {number}
     * @memberof StrategyApiApiStrategyIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiStrategyIdPatch operation in StrategyApi.
 * @export
 * @interface StrategyApiApiStrategyIdPatchRequest
 */
export interface StrategyApiApiStrategyIdPatchRequest {
    /**
     * strategy id
     * @type {number}
     * @memberof StrategyApiApiStrategyIdPatch
     */
    readonly id: number

    /**
     * &#x60;config&#x60; need a extra field &#x60;type&#x60;, same to strategyType
     * @type {StrategyPatchRequest}
     * @memberof StrategyApiApiStrategyIdPatch
     */
    readonly strategyPatchRequest: StrategyPatchRequest
}

/**
 * Request parameters for apiStrategyPageGet operation in StrategyApi.
 * @export
 * @interface StrategyApiApiStrategyPageGetRequest
 */
export interface StrategyApiApiStrategyPageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof StrategyApiApiStrategyPageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof StrategyApiApiStrategyPageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof StrategyApiApiStrategyPageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof StrategyApiApiStrategyPageGet
     */
    readonly orderBy?: string
}

/**
 * Request parameters for apiStrategyPost operation in StrategyApi.
 * @export
 * @interface StrategyApiApiStrategyPostRequest
 */
export interface StrategyApiApiStrategyPostRequest {
    /**
     * &#x60;config&#x60; need a extra field &#x60;type&#x60;, same to strategyType
     * @type {StrategyInsertRequest}
     * @memberof StrategyApiApiStrategyPost
     */
    readonly strategyInsertRequest: StrategyInsertRequest
}

/**
 * StrategyApi - object-oriented interface
 * @export
 * @class StrategyApi
 * @extends {BaseAPI}
 */
export class StrategyApi extends BaseAPI {
    /**
     * 
     * @param {StrategyApiApiStrategyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public apiStrategyIdDelete(requestParameters: StrategyApiApiStrategyIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).apiStrategyIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiApiStrategyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public apiStrategyIdGet(requestParameters: StrategyApiApiStrategyIdGetRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).apiStrategyIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiApiStrategyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public apiStrategyIdPatch(requestParameters: StrategyApiApiStrategyIdPatchRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).apiStrategyIdPatch(requestParameters.id, requestParameters.strategyPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiApiStrategyPageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public apiStrategyPageGet(requestParameters: StrategyApiApiStrategyPageGetRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).apiStrategyPageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategyApiApiStrategyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    public apiStrategyPost(requestParameters: StrategyApiApiStrategyPostRequest, options?: RawAxiosRequestConfig) {
        return StrategyApiFp(this.configuration).apiStrategyPost(requestParameters.strategyInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

