/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IoSakurasouControllerRequestSiteSettingPatchRequest,
  IoSakurasouControllerRequestStrategySettingPatchRequest,
  IoSakurasouControllerVoCommonResponseKotlinCollectionsMapKotlinStringIoSakurasouControllerVoSettingVO,
  IoSakurasouControllerVoCommonResponseKotlinUnit,
} from '../models/index';
import {
    IoSakurasouControllerRequestSiteSettingPatchRequestFromJSON,
    IoSakurasouControllerRequestSiteSettingPatchRequestToJSON,
    IoSakurasouControllerRequestStrategySettingPatchRequestFromJSON,
    IoSakurasouControllerRequestStrategySettingPatchRequestToJSON,
    IoSakurasouControllerVoCommonResponseKotlinCollectionsMapKotlinStringIoSakurasouControllerVoSettingVOFromJSON,
    IoSakurasouControllerVoCommonResponseKotlinCollectionsMapKotlinStringIoSakurasouControllerVoSettingVOToJSON,
    IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON,
    IoSakurasouControllerVoCommonResponseKotlinUnitToJSON,
} from '../models/index';

export interface ApiSettingSitePatchRequest {
    ioSakurasouControllerRequestSiteSettingPatchRequest: IoSakurasouControllerRequestSiteSettingPatchRequest;
}

export interface ApiSettingSystemPatchRequest {
    ioSakurasouControllerRequestStrategySettingPatchRequest: IoSakurasouControllerRequestStrategySettingPatchRequest;
}

/**
 * 
 */
export class SettingApi extends runtime.BaseAPI {

    /**
     * get all settings
     */
    async apiSettingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinCollectionsMapKotlinStringIoSakurasouControllerVoSettingVO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinCollectionsMapKotlinStringIoSakurasouControllerVoSettingVOFromJSON(jsonValue));
    }

    /**
     * get all settings
     */
    async apiSettingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinCollectionsMapKotlinStringIoSakurasouControllerVoSettingVO> {
        const response = await this.apiSettingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * site setting
     */
    async apiSettingSitePatchRaw(requestParameters: ApiSettingSitePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestSiteSettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestSiteSettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestSiteSettingPatchRequest" was null or undefined when calling apiSettingSitePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting/site`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestSiteSettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestSiteSettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     * site setting
     */
    async apiSettingSitePatch(requestParameters: ApiSettingSitePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiSettingSitePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * system setting
     */
    async apiSettingSystemPatchRaw(requestParameters: ApiSettingSystemPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategySettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategySettingPatchRequest" was null or undefined when calling apiSettingSystemPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting/system`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategySettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     * system setting
     */
    async apiSettingSystemPatch(requestParameters: ApiSettingSystemPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiSettingSystemPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
