/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseKotlinUnit } from '../models';
// @ts-ignore
import type { CommonResponseSettingVO } from '../models';
// @ts-ignore
import type { SiteSettingPatchRequest } from '../models';
// @ts-ignore
import type { SystemSettingPatchRequest } from '../models';
/**
 * SettingApi - axios parameter creator
 * @export
 */
export const SettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get settings
         * @param {string} settingType setting type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingSettingTypeGet: async (settingType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingType' is not null or undefined
            assertParamExists('apiSettingSettingTypeGet', 'settingType', settingType)
            const localVarPath = `/api/setting/{setting_type}`
                .replace(`{${"setting_type"}}`, encodeURIComponent(String(settingType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * site setting
         * @param {SiteSettingPatchRequest} siteSettingPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingSitePatch: async (siteSettingPatchRequest: SiteSettingPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siteSettingPatchRequest' is not null or undefined
            assertParamExists('apiSettingSitePatch', 'siteSettingPatchRequest', siteSettingPatchRequest)
            const localVarPath = `/api/setting/site`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siteSettingPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * system setting
         * @param {SystemSettingPatchRequest} systemSettingPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingSystemPatch: async (systemSettingPatchRequest: SystemSettingPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSettingPatchRequest' is not null or undefined
            assertParamExists('apiSettingSystemPatch', 'systemSettingPatchRequest', systemSettingPatchRequest)
            const localVarPath = `/api/setting/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSettingPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingApi - functional programming interface
 * @export
 */
export const SettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingApiAxiosParamCreator(configuration)
    return {
        /**
         * get settings
         * @param {string} settingType setting type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingSettingTypeGet(settingType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseSettingVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingSettingTypeGet(settingType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingApi.apiSettingSettingTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * site setting
         * @param {SiteSettingPatchRequest} siteSettingPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingSitePatch(siteSettingPatchRequest: SiteSettingPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingSitePatch(siteSettingPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingApi.apiSettingSitePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * system setting
         * @param {SystemSettingPatchRequest} systemSettingPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingSystemPatch(systemSettingPatchRequest: SystemSettingPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingSystemPatch(systemSettingPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingApi.apiSettingSystemPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingApi - factory interface
 * @export
 */
export const SettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingApiFp(configuration)
    return {
        /**
         * get settings
         * @param {SettingApiApiSettingSettingTypeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingSettingTypeGet(requestParameters: SettingApiApiSettingSettingTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseSettingVO> {
            return localVarFp.apiSettingSettingTypeGet(requestParameters.settingType, options).then((request) => request(axios, basePath));
        },
        /**
         * site setting
         * @param {SettingApiApiSettingSitePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingSitePatch(requestParameters: SettingApiApiSettingSitePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiSettingSitePatch(requestParameters.siteSettingPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * system setting
         * @param {SettingApiApiSettingSystemPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingSystemPatch(requestParameters: SettingApiApiSettingSystemPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiSettingSystemPatch(requestParameters.systemSettingPatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSettingSettingTypeGet operation in SettingApi.
 * @export
 * @interface SettingApiApiSettingSettingTypeGetRequest
 */
export interface SettingApiApiSettingSettingTypeGetRequest {
    /**
     * setting type
     * @type {string}
     * @memberof SettingApiApiSettingSettingTypeGet
     */
    readonly settingType: string
}

/**
 * Request parameters for apiSettingSitePatch operation in SettingApi.
 * @export
 * @interface SettingApiApiSettingSitePatchRequest
 */
export interface SettingApiApiSettingSitePatchRequest {
    /**
     * 
     * @type {SiteSettingPatchRequest}
     * @memberof SettingApiApiSettingSitePatch
     */
    readonly siteSettingPatchRequest: SiteSettingPatchRequest
}

/**
 * Request parameters for apiSettingSystemPatch operation in SettingApi.
 * @export
 * @interface SettingApiApiSettingSystemPatchRequest
 */
export interface SettingApiApiSettingSystemPatchRequest {
    /**
     * 
     * @type {SystemSettingPatchRequest}
     * @memberof SettingApiApiSettingSystemPatch
     */
    readonly systemSettingPatchRequest: SystemSettingPatchRequest
}

/**
 * SettingApi - object-oriented interface
 * @export
 * @class SettingApi
 * @extends {BaseAPI}
 */
export class SettingApi extends BaseAPI {
    /**
     * get settings
     * @param {SettingApiApiSettingSettingTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public apiSettingSettingTypeGet(requestParameters: SettingApiApiSettingSettingTypeGetRequest, options?: RawAxiosRequestConfig) {
        return SettingApiFp(this.configuration).apiSettingSettingTypeGet(requestParameters.settingType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * site setting
     * @param {SettingApiApiSettingSitePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public apiSettingSitePatch(requestParameters: SettingApiApiSettingSitePatchRequest, options?: RawAxiosRequestConfig) {
        return SettingApiFp(this.configuration).apiSettingSitePatch(requestParameters.siteSettingPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * system setting
     * @param {SettingApiApiSettingSystemPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingApi
     */
    public apiSettingSystemPatch(requestParameters: SettingApiApiSettingSystemPatchRequest, options?: RawAxiosRequestConfig) {
        return SettingApiFp(this.configuration).apiSettingSystemPatch(requestParameters.systemSettingPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

