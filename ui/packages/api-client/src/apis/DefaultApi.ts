/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IoSakurasouControllerRequestAlbumInsertRequest,
  IoSakurasouControllerRequestAlbumPatchRequest,
  IoSakurasouControllerRequestGroupInsertRequest,
  IoSakurasouControllerRequestGroupPatchRequest,
  IoSakurasouControllerRequestImagePatchRequest,
  IoSakurasouControllerRequestSiteInitRequest,
  IoSakurasouControllerRequestSiteSettingPatchRequest,
  IoSakurasouControllerRequestStrategyInsertRequest,
  IoSakurasouControllerRequestStrategyPatchRequest,
  IoSakurasouControllerRequestStrategySettingPatchRequest,
  IoSakurasouControllerRequestUserInsertRequest,
  IoSakurasouControllerRequestUserLoginRequest,
  IoSakurasouControllerRequestUserPatchRequest,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO,
  IoSakurasouControllerVoCommonResponsekotlinUnit,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVO,
  IoSakurasouControllerVoRoleVO,
} from '../models/index';
import {
    IoSakurasouControllerRequestAlbumInsertRequestFromJSON,
    IoSakurasouControllerRequestAlbumInsertRequestToJSON,
    IoSakurasouControllerRequestAlbumPatchRequestFromJSON,
    IoSakurasouControllerRequestAlbumPatchRequestToJSON,
    IoSakurasouControllerRequestGroupInsertRequestFromJSON,
    IoSakurasouControllerRequestGroupInsertRequestToJSON,
    IoSakurasouControllerRequestGroupPatchRequestFromJSON,
    IoSakurasouControllerRequestGroupPatchRequestToJSON,
    IoSakurasouControllerRequestImagePatchRequestFromJSON,
    IoSakurasouControllerRequestImagePatchRequestToJSON,
    IoSakurasouControllerRequestSiteInitRequestFromJSON,
    IoSakurasouControllerRequestSiteInitRequestToJSON,
    IoSakurasouControllerRequestSiteSettingPatchRequestFromJSON,
    IoSakurasouControllerRequestSiteSettingPatchRequestToJSON,
    IoSakurasouControllerRequestStrategyInsertRequestFromJSON,
    IoSakurasouControllerRequestStrategyInsertRequestToJSON,
    IoSakurasouControllerRequestStrategyPatchRequestFromJSON,
    IoSakurasouControllerRequestStrategyPatchRequestToJSON,
    IoSakurasouControllerRequestStrategySettingPatchRequestFromJSON,
    IoSakurasouControllerRequestStrategySettingPatchRequestToJSON,
    IoSakurasouControllerRequestUserInsertRequestFromJSON,
    IoSakurasouControllerRequestUserInsertRequestToJSON,
    IoSakurasouControllerRequestUserLoginRequestFromJSON,
    IoSakurasouControllerRequestUserLoginRequestToJSON,
    IoSakurasouControllerRequestUserPatchRequestFromJSON,
    IoSakurasouControllerRequestUserPatchRequestToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOToJSON,
    IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON,
    IoSakurasouControllerVoCommonResponsekotlinUnitToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVOToJSON,
    IoSakurasouControllerVoRoleVOFromJSON,
    IoSakurasouControllerVoRoleVOToJSON,
} from '../models/index';

export interface ApiAlbumIdDeleteRequest {
    id: number;
}

export interface ApiAlbumIdGetRequest {
    id: number;
}

export interface ApiAlbumIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestAlbumPatchRequest: IoSakurasouControllerRequestAlbumPatchRequest;
}

export interface ApiAlbumPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiAlbumPostRequest {
    ioSakurasouControllerRequestAlbumInsertRequest: IoSakurasouControllerRequestAlbumInsertRequest;
}

export interface ApiGroupIdDeleteRequest {
    id: number;
}

export interface ApiGroupIdGetRequest {
    id: number;
}

export interface ApiGroupIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestGroupPatchRequest: IoSakurasouControllerRequestGroupPatchRequest;
}

export interface ApiGroupPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiGroupPostRequest {
    ioSakurasouControllerRequestGroupInsertRequest: IoSakurasouControllerRequestGroupInsertRequest;
}

export interface ApiImageIdDeleteRequest {
    id: number;
}

export interface ApiImageIdGetRequest {
    id: number;
}

export interface ApiImageIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestImagePatchRequest: IoSakurasouControllerRequestImagePatchRequest;
}

export interface ApiImagePageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiSImageIdGetRequest {
    imageId: string;
}

export interface ApiSettingSitePatchRequest {
    ioSakurasouControllerRequestSiteSettingPatchRequest: IoSakurasouControllerRequestSiteSettingPatchRequest;
}

export interface ApiSettingStrategyPatchRequest {
    ioSakurasouControllerRequestStrategySettingPatchRequest: IoSakurasouControllerRequestStrategySettingPatchRequest;
}

export interface ApiSiteInitPostRequest {
    ioSakurasouControllerRequestSiteInitRequest: IoSakurasouControllerRequestSiteInitRequest;
}

export interface ApiStrategyIdDeleteRequest {
    id: number;
}

export interface ApiStrategyIdGetRequest {
    id: number;
}

export interface ApiStrategyIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestStrategyPatchRequest: IoSakurasouControllerRequestStrategyPatchRequest;
}

export interface ApiStrategyPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiStrategyPostRequest {
    ioSakurasouControllerRequestStrategyInsertRequest: IoSakurasouControllerRequestStrategyInsertRequest;
}

export interface ApiUserBanIdPatchRequest {
    id: number;
}

export interface ApiUserIdDeleteRequest {
    id: number;
}

export interface ApiUserIdGetRequest {
    id: number;
}

export interface ApiUserIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestUserPatchRequest: IoSakurasouControllerRequestUserPatchRequest;
}

export interface ApiUserLoginPostRequest {
    ioSakurasouControllerRequestUserInsertRequest: IoSakurasouControllerRequestUserInsertRequest;
}

export interface ApiUserPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiUserSignupPostRequest {
    ioSakurasouControllerRequestUserLoginRequest: IoSakurasouControllerRequestUserLoginRequest;
}

export interface ApiUserUnbanIdPatchRequest {
    id: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async apiAlbumIdDeleteRaw(requestParameters: ApiAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAlbumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumIdDelete(requestParameters: ApiAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumIdGetRaw(requestParameters: ApiAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAlbumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumIdGet(requestParameters: ApiAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO> {
        const response = await this.apiAlbumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumIdPatchRaw(requestParameters: ApiAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAlbumIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestAlbumPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestAlbumPatchRequest',
                'Required parameter "ioSakurasouControllerRequestAlbumPatchRequest" was null or undefined when calling apiAlbumIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestAlbumPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestAlbumPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumIdPatch(requestParameters: ApiAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumPageGetRaw(requestParameters: ApiAlbumPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiAlbumPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiAlbumPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/album/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumPageGet(requestParameters: ApiAlbumPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO> {
        const response = await this.apiAlbumPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumPostRaw(requestParameters: ApiAlbumPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestAlbumInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestAlbumInsertRequest',
                'Required parameter "ioSakurasouControllerRequestAlbumInsertRequest" was null or undefined when calling apiAlbumPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestAlbumInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestAlbumInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumPost(requestParameters: ApiAlbumPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * return random image if setting allow
     */
    async apiFetchRandomGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fetch/random`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * return random image if setting allow
     */
    async apiFetchRandomGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiFetchRandomGetRaw(initOverrides);
    }

    /**
     */
    async apiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGetRaw(initOverrides);
    }

    /**
     */
    async apiGroupIdDeleteRaw(requestParameters: ApiGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdDelete(requestParameters: ApiGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiGroupIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupIdGetRaw(requestParameters: ApiGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVOFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdGet(requestParameters: ApiGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVO> {
        const response = await this.apiGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupIdPatchRaw(requestParameters: ApiGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestGroupPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestGroupPatchRequest',
                'Required parameter "ioSakurasouControllerRequestGroupPatchRequest" was null or undefined when calling apiGroupIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestGroupPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestGroupPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdPatch(requestParameters: ApiGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiGroupIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupPageGetRaw(requestParameters: ApiGroupPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiGroupPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiGroupPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/group/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupPageGet(requestParameters: ApiGroupPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVO> {
        const response = await this.apiGroupPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupPostRaw(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestGroupInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestGroupInsertRequest',
                'Required parameter "ioSakurasouControllerRequestGroupInsertRequest" was null or undefined when calling apiGroupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestGroupInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestGroupInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupPost(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiGroupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageIdDeleteRaw(requestParameters: ApiImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/image/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageIdDelete(requestParameters: ApiImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageIdGetRaw(requestParameters: ApiImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/image/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageIdGet(requestParameters: ApiImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO> {
        const response = await this.apiImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageIdPatchRaw(requestParameters: ApiImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestImagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestImagePatchRequest',
                'Required parameter "ioSakurasouControllerRequestImagePatchRequest" was null or undefined when calling apiImageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/image/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestImagePatchRequestToJSON(requestParameters['ioSakurasouControllerRequestImagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageIdPatch(requestParameters: ApiImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImagePageGetRaw(requestParameters: ApiImagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiImagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiImagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/image/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImagePageGet(requestParameters: ApiImagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO> {
        const response = await this.apiImagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImagePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImagePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImagePostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRoleAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IoSakurasouControllerVoRoleVO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/role/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IoSakurasouControllerVoRoleVOFromJSON));
    }

    /**
     */
    async apiRoleAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IoSakurasouControllerVoRoleVO>> {
        const response = await this.apiRoleAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSImageIdGetRaw(requestParameters: ApiSImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiSImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/s/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSImageIdGet(requestParameters: ApiSImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiSImageIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * site setting
     */
    async apiSettingSitePatchRaw(requestParameters: ApiSettingSitePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestSiteSettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestSiteSettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestSiteSettingPatchRequest" was null or undefined when calling apiSettingSitePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/setting/site`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestSiteSettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestSiteSettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * site setting
     */
    async apiSettingSitePatch(requestParameters: ApiSettingSitePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiSettingSitePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * strategy setting
     */
    async apiSettingStrategyPatchRaw(requestParameters: ApiSettingStrategyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategySettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategySettingPatchRequest" was null or undefined when calling apiSettingStrategyPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/setting/strategy`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategySettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * strategy setting
     */
    async apiSettingStrategyPatch(requestParameters: ApiSettingStrategyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiSettingStrategyPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSiteInitPostRaw(requestParameters: ApiSiteInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ioSakurasouControllerRequestSiteInitRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestSiteInitRequest',
                'Required parameter "ioSakurasouControllerRequestSiteInitRequest" was null or undefined when calling apiSiteInitPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/site/init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestSiteInitRequestToJSON(requestParameters['ioSakurasouControllerRequestSiteInitRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSiteInitPost(requestParameters: ApiSiteInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiSiteInitPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiStrategyIdDeleteRaw(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdDelete(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiStrategyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdGetRaw(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdGet(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVO> {
        const response = await this.apiStrategyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdPatchRaw(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestStrategyPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategyPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategyPatchRequest" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategyPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategyPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdPatch(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiStrategyIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPageGetRaw(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/strategy/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPageGet(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVO> {
        const response = await this.apiStrategyPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPostRaw(requestParameters: ApiStrategyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestStrategyInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategyInsertRequest',
                'Required parameter "ioSakurasouControllerRequestStrategyInsertRequest" was null or undefined when calling apiStrategyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/strategy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategyInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategyInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPost(requestParameters: ApiStrategyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiStrategyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserBanIdPatchRaw(requestParameters: ApiUserBanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserBanIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/ban/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserBanIdPatch(requestParameters: ApiUserBanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserBanIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserIdDeleteRaw(requestParameters: ApiUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserIdDelete(requestParameters: ApiUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserIdGetRaw(requestParameters: ApiUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserIdGet(requestParameters: ApiUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO> {
        const response = await this.apiUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserIdPatchRaw(requestParameters: ApiUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestUserPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserPatchRequest',
                'Required parameter "ioSakurasouControllerRequestUserPatchRequest" was null or undefined when calling apiUserIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestUserPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserIdPatch(requestParameters: ApiUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserLoginPostRaw(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ioSakurasouControllerRequestUserInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserInsertRequest',
                'Required parameter "ioSakurasouControllerRequestUserInsertRequest" was null or undefined when calling apiUserLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestUserInsertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserLoginPost(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserPageGetRaw(requestParameters: ApiUserPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiUserPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiUserPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserPageGet(requestParameters: ApiUserPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVO> {
        const response = await this.apiUserPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSignupPostRaw(requestParameters: ApiUserSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ioSakurasouControllerRequestUserLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserLoginRequest',
                'Required parameter "ioSakurasouControllerRequestUserLoginRequest" was null or undefined when calling apiUserSignupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserLoginRequestToJSON(requestParameters['ioSakurasouControllerRequestUserLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserSignupPost(requestParameters: ApiUserSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserSignupPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserUnbanIdPatchRaw(requestParameters: ApiUserUnbanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserUnbanIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/unban/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUnbanIdPatch(requestParameters: ApiUserUnbanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserUnbanIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector3b5c665cShortGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/com.ucasoft.ktor.simpleCache.CacheOutputSelector@3b5c665c/short`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector3b5c665cShortGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.comUcasoftKtorSimpleCacheCacheOutputSelector3b5c665cShortGetRaw(initOverrides);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector41dc0598DefaultGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/com.ucasoft.ktor.simpleCache.CacheOutputSelector@41dc0598/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector41dc0598DefaultGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.comUcasoftKtorSimpleCacheCacheOutputSelector41dc0598DefaultGetRaw(initOverrides);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector625a4ffShortGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/com.ucasoft.ktor.simpleCache.CacheOutputSelector@625a4ff/short`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector625a4ffShortGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.comUcasoftKtorSimpleCacheCacheOutputSelector625a4ffShortGetRaw(initOverrides);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector78e17a99DefaultGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/com.ucasoft.ktor.simpleCache.CacheOutputSelector@78e17a99/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async comUcasoftKtorSimpleCacheCacheOutputSelector78e17a99DefaultGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.comUcasoftKtorSimpleCacheCacheOutputSelector78e17a99DefaultGetRaw(initOverrides);
    }

    /**
     */
    async getRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{...}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRaw(initOverrides);
    }

    /**
     */
    async protectedRouteBasicGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/protected/route/basic`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async protectedRouteBasicGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.protectedRouteBasicGetRaw(initOverrides);
    }

    /**
     */
    async protectedRouteFormGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/protected/route/form`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async protectedRouteFormGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.protectedRouteFormGetRaw(initOverrides);
    }

}
