/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IoSakurasouControllerRequestAlbumManageInsertRequest,
  IoSakurasouControllerRequestAlbumManagePatchRequest,
  IoSakurasouControllerRequestAlbumSelfInsertRequest,
  IoSakurasouControllerRequestAlbumSelfPatchRequest,
  IoSakurasouControllerRequestGroupInsertRequest,
  IoSakurasouControllerRequestGroupPatchRequest,
  IoSakurasouControllerRequestImagePatchRequest,
  IoSakurasouControllerRequestSiteInitRequest,
  IoSakurasouControllerRequestSiteSettingPatchRequest,
  IoSakurasouControllerRequestStrategyInsertRequest,
  IoSakurasouControllerRequestStrategyPatchRequest,
  IoSakurasouControllerRequestStrategySettingPatchRequest,
  IoSakurasouControllerRequestUserInsertRequest,
  IoSakurasouControllerRequestUserLoginRequest,
  IoSakurasouControllerRequestUserManageInsertRequest,
  IoSakurasouControllerRequestUserManagePatchRequest,
  IoSakurasouControllerRequestUserSelfPatchRequest,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVO,
  IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO,
  IoSakurasouControllerVoCommonResponsekotlinCollectionsListioSakurasouControllerVoSettingVO,
  IoSakurasouControllerVoCommonResponsekotlinUnit,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVO,
  IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVO,
  IoSakurasouControllerVoRoleVO,
} from '../models/index';
import {
    IoSakurasouControllerRequestAlbumManageInsertRequestFromJSON,
    IoSakurasouControllerRequestAlbumManageInsertRequestToJSON,
    IoSakurasouControllerRequestAlbumManagePatchRequestFromJSON,
    IoSakurasouControllerRequestAlbumManagePatchRequestToJSON,
    IoSakurasouControllerRequestAlbumSelfInsertRequestFromJSON,
    IoSakurasouControllerRequestAlbumSelfInsertRequestToJSON,
    IoSakurasouControllerRequestAlbumSelfPatchRequestFromJSON,
    IoSakurasouControllerRequestAlbumSelfPatchRequestToJSON,
    IoSakurasouControllerRequestGroupInsertRequestFromJSON,
    IoSakurasouControllerRequestGroupInsertRequestToJSON,
    IoSakurasouControllerRequestGroupPatchRequestFromJSON,
    IoSakurasouControllerRequestGroupPatchRequestToJSON,
    IoSakurasouControllerRequestImagePatchRequestFromJSON,
    IoSakurasouControllerRequestImagePatchRequestToJSON,
    IoSakurasouControllerRequestSiteInitRequestFromJSON,
    IoSakurasouControllerRequestSiteInitRequestToJSON,
    IoSakurasouControllerRequestSiteSettingPatchRequestFromJSON,
    IoSakurasouControllerRequestSiteSettingPatchRequestToJSON,
    IoSakurasouControllerRequestStrategyInsertRequestFromJSON,
    IoSakurasouControllerRequestStrategyInsertRequestToJSON,
    IoSakurasouControllerRequestStrategyPatchRequestFromJSON,
    IoSakurasouControllerRequestStrategyPatchRequestToJSON,
    IoSakurasouControllerRequestStrategySettingPatchRequestFromJSON,
    IoSakurasouControllerRequestStrategySettingPatchRequestToJSON,
    IoSakurasouControllerRequestUserInsertRequestFromJSON,
    IoSakurasouControllerRequestUserInsertRequestToJSON,
    IoSakurasouControllerRequestUserLoginRequestFromJSON,
    IoSakurasouControllerRequestUserLoginRequestToJSON,
    IoSakurasouControllerRequestUserManageInsertRequestFromJSON,
    IoSakurasouControllerRequestUserManageInsertRequestToJSON,
    IoSakurasouControllerRequestUserManagePatchRequestFromJSON,
    IoSakurasouControllerRequestUserManagePatchRequestToJSON,
    IoSakurasouControllerRequestUserSelfPatchRequestFromJSON,
    IoSakurasouControllerRequestUserSelfPatchRequestToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVOToJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOFromJSON,
    IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOToJSON,
    IoSakurasouControllerVoCommonResponsekotlinCollectionsListioSakurasouControllerVoSettingVOFromJSON,
    IoSakurasouControllerVoCommonResponsekotlinCollectionsListioSakurasouControllerVoSettingVOToJSON,
    IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON,
    IoSakurasouControllerVoCommonResponsekotlinUnitToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVOToJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVOFromJSON,
    IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVOToJSON,
    IoSakurasouControllerVoRoleVOFromJSON,
    IoSakurasouControllerVoRoleVOToJSON,
} from '../models/index';

export interface ApiAlbumAlbumIdDeleteRequest {
    albumId: number;
}

export interface ApiAlbumAlbumIdGetRequest {
    albumId: number;
}

export interface ApiAlbumAlbumIdPatchRequest {
    albumId: number;
    ioSakurasouControllerRequestAlbumSelfPatchRequest: IoSakurasouControllerRequestAlbumSelfPatchRequest;
}

export interface ApiAlbumManageAlbumIdDeleteRequest {
    albumId: number;
    userId: number;
}

export interface ApiAlbumManageAlbumIdGetRequest {
    albumId: number;
    userId: number;
}

export interface ApiAlbumManageAlbumIdPatchRequest {
    albumId: number;
    userId: number;
    ioSakurasouControllerRequestAlbumManagePatchRequest: IoSakurasouControllerRequestAlbumManagePatchRequest;
}

export interface ApiAlbumManagePageGetRequest {
    page: number;
    pageSize: number;
    userId: number;
    order?: string;
    orderBy?: string;
}

export interface ApiAlbumManagePostRequest {
    userId: number;
    ioSakurasouControllerRequestAlbumManageInsertRequest: IoSakurasouControllerRequestAlbumManageInsertRequest;
}

export interface ApiAlbumPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiAlbumPostRequest {
    ioSakurasouControllerRequestAlbumSelfInsertRequest: IoSakurasouControllerRequestAlbumSelfInsertRequest;
}

export interface ApiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGetRequest {
    imageId: string;
}

export interface ApiGroupIdDeleteRequest {
    id: number;
}

export interface ApiGroupIdGetRequest {
    id: number;
}

export interface ApiGroupIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestGroupPatchRequest: IoSakurasouControllerRequestGroupPatchRequest;
}

export interface ApiGroupPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiGroupPostRequest {
    ioSakurasouControllerRequestGroupInsertRequest: IoSakurasouControllerRequestGroupInsertRequest;
}

export interface ApiImageImageIdDeleteRequest {
    imageId: number;
}

export interface ApiImageImageIdGetRequest {
    imageId: number;
}

export interface ApiImageImageIdPageGetRequest {
    page: number;
    pageSize: number;
    imageId: number;
    order?: string;
    orderBy?: string;
}

export interface ApiImageImageIdPatchRequest {
    imageId: number;
    ioSakurasouControllerRequestImagePatchRequest: IoSakurasouControllerRequestImagePatchRequest;
}

export interface ApiImageManageImageIdDeleteRequest {
    imageId: number;
    id: number;
}

export interface ApiImageManageImageIdGetRequest {
    imageId: number;
    imageId2: number;
    id: number;
}

export interface ApiImageManageImageIdPageGetRequest {
    page: number;
    pageSize: number;
    imageId: number;
    id: number;
    order?: string;
    orderBy?: string;
}

export interface ApiImageManageImageIdPatchRequest {
    imageId: number;
    id: number;
    ioSakurasouControllerRequestImagePatchRequest: IoSakurasouControllerRequestImagePatchRequest;
}

export interface ApiSettingSitePatchRequest {
    ioSakurasouControllerRequestSiteSettingPatchRequest: IoSakurasouControllerRequestSiteSettingPatchRequest;
}

export interface ApiSettingStrategyPatchRequest {
    ioSakurasouControllerRequestStrategySettingPatchRequest: IoSakurasouControllerRequestStrategySettingPatchRequest;
}

export interface ApiSettingSystemPatchRequest {
    ioSakurasouControllerRequestStrategySettingPatchRequest: IoSakurasouControllerRequestStrategySettingPatchRequest;
}

export interface ApiSiteInitPostRequest {
    ioSakurasouControllerRequestSiteInitRequest: IoSakurasouControllerRequestSiteInitRequest;
}

export interface ApiStrategyIdDeleteRequest {
    id: number;
}

export interface ApiStrategyIdGetRequest {
    id: number;
}

export interface ApiStrategyIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestStrategyPatchRequest: IoSakurasouControllerRequestStrategyPatchRequest;
}

export interface ApiStrategyPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiStrategyPostRequest {
    ioSakurasouControllerRequestStrategyInsertRequest: IoSakurasouControllerRequestStrategyInsertRequest;
}

export interface ApiUserBanIdPatchRequest {
    id: number;
}

export interface ApiUserLoginPostRequest {
    ioSakurasouControllerRequestUserLoginRequest: IoSakurasouControllerRequestUserLoginRequest;
}

export interface ApiUserManageIdDeleteRequest {
    id: number;
}

export interface ApiUserManageIdGetRequest {
    id: number;
}

export interface ApiUserManageIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestUserManagePatchRequest: IoSakurasouControllerRequestUserManagePatchRequest;
}

export interface ApiUserManagePageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiUserManagePostRequest {
    ioSakurasouControllerRequestUserManageInsertRequest: IoSakurasouControllerRequestUserManageInsertRequest;
}

export interface ApiUserSelfPatchRequest {
    ioSakurasouControllerRequestUserSelfPatchRequest: IoSakurasouControllerRequestUserSelfPatchRequest;
}

export interface ApiUserSignupPostRequest {
    ioSakurasouControllerRequestUserInsertRequest: IoSakurasouControllerRequestUserInsertRequest;
}

export interface ApiUserUnbanIdPatchRequest {
    id: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async apiAlbumAlbumIdDeleteRaw(requestParameters: ApiAlbumAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumAlbumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/{albumId}`.replace(`{${"album id"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumAlbumIdDelete(requestParameters: ApiAlbumAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumAlbumIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumAlbumIdGetRaw(requestParameters: ApiAlbumAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumAlbumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/{albumId}`.replace(`{${"album id"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumAlbumIdGet(requestParameters: ApiAlbumAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO> {
        const response = await this.apiAlbumAlbumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumAlbumIdPatchRaw(requestParameters: ApiAlbumAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumAlbumIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestAlbumSelfPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestAlbumSelfPatchRequest',
                'Required parameter "ioSakurasouControllerRequestAlbumSelfPatchRequest" was null or undefined when calling apiAlbumAlbumIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/{albumId}`.replace(`{${"album id"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestAlbumSelfPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestAlbumSelfPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumAlbumIdPatch(requestParameters: ApiAlbumAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumAlbumIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManageAlbumIdDeleteRaw(requestParameters: ApiAlbumManageAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumManageAlbumIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiAlbumManageAlbumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/{albumId}`.replace(`{${"album id"}}`, encodeURIComponent(String(requestParameters['albumId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManageAlbumIdDelete(requestParameters: ApiAlbumManageAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumManageAlbumIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManageAlbumIdGetRaw(requestParameters: ApiAlbumManageAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumManageAlbumIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiAlbumManageAlbumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/{albumId}`.replace(`{${"album id"}}`, encodeURIComponent(String(requestParameters['albumId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManageAlbumIdGet(requestParameters: ApiAlbumManageAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoAlbumVO> {
        const response = await this.apiAlbumManageAlbumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManageAlbumIdPatchRaw(requestParameters: ApiAlbumManageAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumManageAlbumIdPatch().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiAlbumManageAlbumIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestAlbumManagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestAlbumManagePatchRequest',
                'Required parameter "ioSakurasouControllerRequestAlbumManagePatchRequest" was null or undefined when calling apiAlbumManageAlbumIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/{albumId}`.replace(`{${"album id"}}`, encodeURIComponent(String(requestParameters['albumId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestAlbumManagePatchRequestToJSON(requestParameters['ioSakurasouControllerRequestAlbumManagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManageAlbumIdPatch(requestParameters: ApiAlbumManageAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumManageAlbumIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManagePageGetRaw(requestParameters: ApiAlbumManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiAlbumManagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiAlbumManagePageGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiAlbumManagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/page`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManagePageGet(requestParameters: ApiAlbumManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO> {
        const response = await this.apiAlbumManagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManagePostRaw(requestParameters: ApiAlbumManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiAlbumManagePost().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestAlbumManageInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestAlbumManageInsertRequest',
                'Required parameter "ioSakurasouControllerRequestAlbumManageInsertRequest" was null or undefined when calling apiAlbumManagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestAlbumManageInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestAlbumManageInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManagePost(requestParameters: ApiAlbumManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumManagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumPageGetRaw(requestParameters: ApiAlbumPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiAlbumPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiAlbumPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumPageGet(requestParameters: ApiAlbumPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoAlbumPageVO> {
        const response = await this.apiAlbumPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumPostRaw(requestParameters: ApiAlbumPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestAlbumSelfInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestAlbumSelfInsertRequest',
                'Required parameter "ioSakurasouControllerRequestAlbumSelfInsertRequest" was null or undefined when calling apiAlbumPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestAlbumSelfInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestAlbumSelfInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumPost(requestParameters: ApiAlbumPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiAlbumPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * return random image if setting allow
     */
    async apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdFetchRandomGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/com.ucasoft.ktor.simpleCache.CacheOutputSelector@74834afd/fetch/random`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * return random image if setting allow
     */
    async apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdFetchRandomGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdFetchRandomGetRaw(initOverrides);
    }

    /**
     */
    async apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGetRaw(requestParameters: ApiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/com.ucasoft.ktor.simpleCache.CacheOutputSelector@74834afd/s/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGet(requestParameters: ApiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiComUcasoftKtorSimpleCacheCacheOutputSelector74834afdSImageIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiGroupIdDeleteRaw(requestParameters: ApiGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdDelete(requestParameters: ApiGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiGroupIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupIdGetRaw(requestParameters: ApiGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVOFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdGet(requestParameters: ApiGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoGroupVO> {
        const response = await this.apiGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupIdPatchRaw(requestParameters: ApiGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestGroupPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestGroupPatchRequest',
                'Required parameter "ioSakurasouControllerRequestGroupPatchRequest" was null or undefined when calling apiGroupIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestGroupPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestGroupPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdPatch(requestParameters: ApiGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiGroupIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupPageGetRaw(requestParameters: ApiGroupPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiGroupPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiGroupPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupPageGet(requestParameters: ApiGroupPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoGroupPageVO> {
        const response = await this.apiGroupPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupPostRaw(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestGroupInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestGroupInsertRequest',
                'Required parameter "ioSakurasouControllerRequestGroupInsertRequest" was null or undefined when calling apiGroupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestGroupInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestGroupInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupPost(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiGroupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdDeleteRaw(requestParameters: ApiImageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdDelete(requestParameters: ApiImageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImageImageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdGetRaw(requestParameters: ApiImageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdGet(requestParameters: ApiImageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO> {
        const response = await this.apiImageImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdPageGetRaw(requestParameters: ApiImageImageIdPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiImageImageIdPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiImageImageIdPageGet().'
            );
        }

        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}/page`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdPageGet(requestParameters: ApiImageImageIdPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO> {
        const response = await this.apiImageImageIdPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdPatchRaw(requestParameters: ApiImageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestImagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestImagePatchRequest',
                'Required parameter "ioSakurasouControllerRequestImagePatchRequest" was null or undefined when calling apiImageImageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestImagePatchRequestToJSON(requestParameters['ioSakurasouControllerRequestImagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdPatch(requestParameters: ApiImageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImageImageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdDeleteRaw(requestParameters: ApiImageManageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageManageImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdDelete(requestParameters: ApiImageManageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImageManageImageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdGetRaw(requestParameters: ApiImageManageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdGet().'
            );
        }

        if (requestParameters['imageId2'] == null) {
            throw new runtime.RequiredError(
                'imageId2',
                'Required parameter "imageId2" was null or undefined when calling apiImageManageImageIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageManageImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId2']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdGet(requestParameters: ApiImageManageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoImageVO> {
        const response = await this.apiImageManageImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdPageGetRaw(requestParameters: ApiImageManageImageIdPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiImageManageImageIdPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiImageManageImageIdPageGet().'
            );
        }

        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdPageGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageManageImageIdPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}/page`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdPageGet(requestParameters: ApiImageManageImageIdPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoImagePageVO> {
        const response = await this.apiImageManageImageIdPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdPatchRaw(requestParameters: ApiImageManageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdPatch().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiImageManageImageIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestImagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestImagePatchRequest',
                'Required parameter "ioSakurasouControllerRequestImagePatchRequest" was null or undefined when calling apiImageManageImageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestImagePatchRequestToJSON(requestParameters['ioSakurasouControllerRequestImagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdPatch(requestParameters: ApiImageManageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImageManageImageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImagePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImagePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiImagePostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRoleAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IoSakurasouControllerVoRoleVO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/role/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IoSakurasouControllerVoRoleVOFromJSON));
    }

    /**
     */
    async apiRoleAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IoSakurasouControllerVoRoleVO>> {
        const response = await this.apiRoleAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * get all settings
     */
    async apiSettingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinCollectionsListioSakurasouControllerVoSettingVO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinCollectionsListioSakurasouControllerVoSettingVOFromJSON(jsonValue));
    }

    /**
     * get all settings
     */
    async apiSettingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinCollectionsListioSakurasouControllerVoSettingVO> {
        const response = await this.apiSettingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * site setting
     */
    async apiSettingSitePatchRaw(requestParameters: ApiSettingSitePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestSiteSettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestSiteSettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestSiteSettingPatchRequest" was null or undefined when calling apiSettingSitePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting/site`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestSiteSettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestSiteSettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * site setting
     */
    async apiSettingSitePatch(requestParameters: ApiSettingSitePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiSettingSitePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * strategy setting
     */
    async apiSettingStrategyPatchRaw(requestParameters: ApiSettingStrategyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategySettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategySettingPatchRequest" was null or undefined when calling apiSettingStrategyPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting/strategy`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategySettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * strategy setting
     */
    async apiSettingStrategyPatch(requestParameters: ApiSettingStrategyPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiSettingStrategyPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * system setting
     */
    async apiSettingSystemPatchRaw(requestParameters: ApiSettingSystemPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategySettingPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategySettingPatchRequest" was null or undefined when calling apiSettingSystemPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/setting/system`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategySettingPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategySettingPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * system setting
     */
    async apiSettingSystemPatch(requestParameters: ApiSettingSystemPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiSettingSystemPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSiteInitPostRaw(requestParameters: ApiSiteInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ioSakurasouControllerRequestSiteInitRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestSiteInitRequest',
                'Required parameter "ioSakurasouControllerRequestSiteInitRequest" was null or undefined when calling apiSiteInitPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/site/init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestSiteInitRequestToJSON(requestParameters['ioSakurasouControllerRequestSiteInitRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSiteInitPost(requestParameters: ApiSiteInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiSiteInitPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiStrategyIdDeleteRaw(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdDelete(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiStrategyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdGetRaw(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdGet(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoStrategyVO> {
        const response = await this.apiStrategyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdPatchRaw(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestStrategyPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategyPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategyPatchRequest" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategyPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategyPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdPatch(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiStrategyIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPageGetRaw(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPageGet(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoStrategyPageVO> {
        const response = await this.apiStrategyPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPostRaw(requestParameters: ApiStrategyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestStrategyInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategyInsertRequest',
                'Required parameter "ioSakurasouControllerRequestStrategyInsertRequest" was null or undefined when calling apiStrategyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategyInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategyInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPost(requestParameters: ApiStrategyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiStrategyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserBanIdPatchRaw(requestParameters: ApiUserBanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserBanIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/ban/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserBanIdPatch(requestParameters: ApiUserBanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserBanIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserLoginPostRaw(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ioSakurasouControllerRequestUserLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserLoginRequest',
                'Required parameter "ioSakurasouControllerRequestUserLoginRequest" was null or undefined when calling apiUserLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserLoginRequestToJSON(requestParameters['ioSakurasouControllerRequestUserLoginRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserLoginPost(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserManageIdDeleteRaw(requestParameters: ApiUserManageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserManageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserManageIdDelete(requestParameters: ApiUserManageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserManageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserManageIdGetRaw(requestParameters: ApiUserManageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserManageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserManageIdGet(requestParameters: ApiUserManageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO> {
        const response = await this.apiUserManageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * modify any user
     */
    async apiUserManageIdPatchRaw(requestParameters: ApiUserManageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserManageIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestUserManagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserManagePatchRequest',
                'Required parameter "ioSakurasouControllerRequestUserManagePatchRequest" was null or undefined when calling apiUserManageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserManagePatchRequestToJSON(requestParameters['ioSakurasouControllerRequestUserManagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * modify any user
     */
    async apiUserManageIdPatch(requestParameters: ApiUserManageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserManageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserManagePageGetRaw(requestParameters: ApiUserManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiUserManagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiUserManagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserManagePageGet(requestParameters: ApiUserManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultioSakurasouControllerVoUserPageVO> {
        const response = await this.apiUserManagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * admin manual add user
     */
    async apiUserManagePostRaw(requestParameters: ApiUserManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestUserManageInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserManageInsertRequest',
                'Required parameter "ioSakurasouControllerRequestUserManageInsertRequest" was null or undefined when calling apiUserManagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/manage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserManageInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestUserManageInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * admin manual add user
     */
    async apiUserManagePost(requestParameters: ApiUserManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserManagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSelfGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVOFromJSON(jsonValue));
    }

    /**
     */
    async apiUserSelfGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseioSakurasouControllerVoUserVO> {
        const response = await this.apiUserSelfGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * modify self
     */
    async apiUserSelfPatchRaw(requestParameters: ApiUserSelfPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['ioSakurasouControllerRequestUserSelfPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserSelfPatchRequest',
                'Required parameter "ioSakurasouControllerRequestUserSelfPatchRequest" was null or undefined when calling apiUserSelfPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/self`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserSelfPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestUserSelfPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     * modify self
     */
    async apiUserSelfPatch(requestParameters: ApiUserSelfPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserSelfPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserSignupPostRaw(requestParameters: ApiUserSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ioSakurasouControllerRequestUserInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestUserInsertRequest',
                'Required parameter "ioSakurasouControllerRequestUserInsertRequest" was null or undefined when calling apiUserSignupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestUserInsertRequestToJSON(requestParameters['ioSakurasouControllerRequestUserInsertRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserSignupPost(requestParameters: ApiUserSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserSignupPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserUnbanIdPatchRaw(requestParameters: ApiUserUnbanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponsekotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUserUnbanIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/user/unban/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponsekotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUnbanIdPatch(requestParameters: ApiUserUnbanIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponsekotlinUnit> {
        const response = await this.apiUserUnbanIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{...}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRaw(initOverrides);
    }

}
