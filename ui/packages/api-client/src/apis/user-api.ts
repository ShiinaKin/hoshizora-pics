/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseKotlinUnit } from '../models';
// @ts-ignore
import type { CommonResponsePageResultUserPageVO } from '../models';
// @ts-ignore
import type { CommonResponseUserVO } from '../models';
// @ts-ignore
import type { UserManageInsertRequest } from '../models';
// @ts-ignore
import type { UserManagePatchRequest } from '../models';
// @ts-ignore
import type { UserSelfPatchRequest } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserBanIdPatch: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserBanIdPatch', 'id', id)
            const localVarPath = `/api/user/ban/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManageIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserManageIdDelete', 'id', id)
            const localVarPath = `/api/user/manage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManageIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserManageIdGet', 'id', id)
            const localVarPath = `/api/user/manage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * modify any user
         * @param {number} id user id
         * @param {UserManagePatchRequest} userManagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManageIdPatch: async (id: number, userManagePatchRequest: UserManagePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserManageIdPatch', 'id', id)
            // verify required parameter 'userManagePatchRequest' is not null or undefined
            assertParamExists('apiUserManageIdPatch', 'userManagePatchRequest', userManagePatchRequest)
            const localVarPath = `/api/user/manage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userManagePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {boolean} [isBanned] is banned
         * @param {string} [usernameSearch] search username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagePageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, isBanned?: boolean, usernameSearch?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiUserManagePageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiUserManagePageGet', 'pageSize', pageSize)
            const localVarPath = `/api/user/manage/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (isBanned !== undefined) {
                localVarQueryParameter['isBanned'] = isBanned;
            }

            if (usernameSearch !== undefined) {
                localVarQueryParameter['usernameSearch'] = usernameSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * admin manual add user
         * @param {UserManageInsertRequest} userManageInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagePost: async (userManageInsertRequest: UserManageInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userManageInsertRequest' is not null or undefined
            assertParamExists('apiUserManagePost', 'userManageInsertRequest', userManageInsertRequest)
            const localVarPath = `/api/user/manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userManageInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSelfGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * modify self
         * @param {UserSelfPatchRequest} userSelfPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSelfPatch: async (userSelfPatchRequest: UserSelfPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSelfPatchRequest' is not null or undefined
            assertParamExists('apiUserSelfPatch', 'userSelfPatchRequest', userSelfPatchRequest)
            const localVarPath = `/api/user/self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSelfPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUnbanIdPatch: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUserUnbanIdPatch', 'id', id)
            const localVarPath = `/api/user/unban/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserBanIdPatch(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserBanIdPatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserBanIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManageIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManageIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserManageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManageIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseUserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManageIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserManageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * modify any user
         * @param {number} id user id
         * @param {UserManagePatchRequest} userManagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManageIdPatch(id: number, userManagePatchRequest: UserManagePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManageIdPatch(id, userManagePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserManageIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {boolean} [isBanned] is banned
         * @param {string} [usernameSearch] search username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagePageGet(page: number, pageSize: number, order?: string, orderBy?: string, isBanned?: boolean, usernameSearch?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultUserPageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagePageGet(page, pageSize, order, orderBy, isBanned, usernameSearch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserManagePageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * admin manual add user
         * @param {UserManageInsertRequest} userManageInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserManagePost(userManageInsertRequest: UserManageInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserManagePost(userManageInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserManagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserSelfGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseUserVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSelfGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * modify self
         * @param {UserSelfPatchRequest} userSelfPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserSelfPatch(userSelfPatchRequest: UserSelfPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSelfPatch(userSelfPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserSelfPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUnbanIdPatch(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUnbanIdPatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserUnbanIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserApiApiUserBanIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserBanIdPatch(requestParameters: UserApiApiUserBanIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiUserBanIdPatch(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUserManageIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManageIdDelete(requestParameters: UserApiApiUserManageIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiUserManageIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUserManageIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManageIdGet(requestParameters: UserApiApiUserManageIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseUserVO> {
            return localVarFp.apiUserManageIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * modify any user
         * @param {UserApiApiUserManageIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManageIdPatch(requestParameters: UserApiApiUserManageIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiUserManageIdPatch(requestParameters.id, requestParameters.userManagePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUserManagePageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagePageGet(requestParameters: UserApiApiUserManagePageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultUserPageVO> {
            return localVarFp.apiUserManagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.isBanned, requestParameters.usernameSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * admin manual add user
         * @param {UserApiApiUserManagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserManagePost(requestParameters: UserApiApiUserManagePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiUserManagePost(requestParameters.userManageInsertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSelfGet(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseUserVO> {
            return localVarFp.apiUserSelfGet(options).then((request) => request(axios, basePath));
        },
        /**
         * modify self
         * @param {UserApiApiUserSelfPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserSelfPatch(requestParameters: UserApiApiUserSelfPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiUserSelfPatch(requestParameters.userSelfPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUserUnbanIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUnbanIdPatch(requestParameters: UserApiApiUserUnbanIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiUserUnbanIdPatch(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiUserBanIdPatch operation in UserApi.
 * @export
 * @interface UserApiApiUserBanIdPatchRequest
 */
export interface UserApiApiUserBanIdPatchRequest {
    /**
     * user id
     * @type {number}
     * @memberof UserApiApiUserBanIdPatch
     */
    readonly id: number
}

/**
 * Request parameters for apiUserManageIdDelete operation in UserApi.
 * @export
 * @interface UserApiApiUserManageIdDeleteRequest
 */
export interface UserApiApiUserManageIdDeleteRequest {
    /**
     * user id
     * @type {number}
     * @memberof UserApiApiUserManageIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiUserManageIdGet operation in UserApi.
 * @export
 * @interface UserApiApiUserManageIdGetRequest
 */
export interface UserApiApiUserManageIdGetRequest {
    /**
     * user id
     * @type {number}
     * @memberof UserApiApiUserManageIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiUserManageIdPatch operation in UserApi.
 * @export
 * @interface UserApiApiUserManageIdPatchRequest
 */
export interface UserApiApiUserManageIdPatchRequest {
    /**
     * user id
     * @type {number}
     * @memberof UserApiApiUserManageIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {UserManagePatchRequest}
     * @memberof UserApiApiUserManageIdPatch
     */
    readonly userManagePatchRequest: UserManagePatchRequest
}

/**
 * Request parameters for apiUserManagePageGet operation in UserApi.
 * @export
 * @interface UserApiApiUserManagePageGetRequest
 */
export interface UserApiApiUserManagePageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof UserApiApiUserManagePageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof UserApiApiUserManagePageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof UserApiApiUserManagePageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof UserApiApiUserManagePageGet
     */
    readonly orderBy?: string

    /**
     * is banned
     * @type {boolean}
     * @memberof UserApiApiUserManagePageGet
     */
    readonly isBanned?: boolean

    /**
     * search username
     * @type {string}
     * @memberof UserApiApiUserManagePageGet
     */
    readonly usernameSearch?: string
}

/**
 * Request parameters for apiUserManagePost operation in UserApi.
 * @export
 * @interface UserApiApiUserManagePostRequest
 */
export interface UserApiApiUserManagePostRequest {
    /**
     * 
     * @type {UserManageInsertRequest}
     * @memberof UserApiApiUserManagePost
     */
    readonly userManageInsertRequest: UserManageInsertRequest
}

/**
 * Request parameters for apiUserSelfPatch operation in UserApi.
 * @export
 * @interface UserApiApiUserSelfPatchRequest
 */
export interface UserApiApiUserSelfPatchRequest {
    /**
     * 
     * @type {UserSelfPatchRequest}
     * @memberof UserApiApiUserSelfPatch
     */
    readonly userSelfPatchRequest: UserSelfPatchRequest
}

/**
 * Request parameters for apiUserUnbanIdPatch operation in UserApi.
 * @export
 * @interface UserApiApiUserUnbanIdPatchRequest
 */
export interface UserApiApiUserUnbanIdPatchRequest {
    /**
     * user id
     * @type {number}
     * @memberof UserApiApiUserUnbanIdPatch
     */
    readonly id: number
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiApiUserBanIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserBanIdPatch(requestParameters: UserApiApiUserBanIdPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserBanIdPatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUserManageIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserManageIdDelete(requestParameters: UserApiApiUserManageIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserManageIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUserManageIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserManageIdGet(requestParameters: UserApiApiUserManageIdGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserManageIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * modify any user
     * @param {UserApiApiUserManageIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserManageIdPatch(requestParameters: UserApiApiUserManageIdPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserManageIdPatch(requestParameters.id, requestParameters.userManagePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUserManagePageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserManagePageGet(requestParameters: UserApiApiUserManagePageGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserManagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.isBanned, requestParameters.usernameSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * admin manual add user
     * @param {UserApiApiUserManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserManagePost(requestParameters: UserApiApiUserManagePostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserManagePost(requestParameters.userManageInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserSelfGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserSelfGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * modify self
     * @param {UserApiApiUserSelfPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserSelfPatch(requestParameters: UserApiApiUserSelfPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserSelfPatch(requestParameters.userSelfPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUserUnbanIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUnbanIdPatch(requestParameters: UserApiApiUserUnbanIdPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUnbanIdPatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

