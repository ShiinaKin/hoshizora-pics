/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiStrategyPostRequest,
  IoSakurasouControllerRequestStrategyPatchRequest,
  IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoStrategyVO,
  IoSakurasouControllerVoCommonResponseKotlinUnit,
  IoSakurasouControllerVoPageResultIoSakurasouControllerVoStrategyPageVO,
} from '../models/index';
import {
    ApiStrategyPostRequestFromJSON,
    ApiStrategyPostRequestToJSON,
    IoSakurasouControllerRequestStrategyPatchRequestFromJSON,
    IoSakurasouControllerRequestStrategyPatchRequestToJSON,
    IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoStrategyVOFromJSON,
    IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoStrategyVOToJSON,
    IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON,
    IoSakurasouControllerVoCommonResponseKotlinUnitToJSON,
    IoSakurasouControllerVoPageResultIoSakurasouControllerVoStrategyPageVOFromJSON,
    IoSakurasouControllerVoPageResultIoSakurasouControllerVoStrategyPageVOToJSON,
} from '../models/index';

export interface ApiStrategyIdDeleteRequest {
    id: number;
}

export interface ApiStrategyIdGetRequest {
    id: number;
}

export interface ApiStrategyIdPatchRequest {
    id: number;
    ioSakurasouControllerRequestStrategyPatchRequest: IoSakurasouControllerRequestStrategyPatchRequest;
}

export interface ApiStrategyPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiStrategyPostOperationRequest {
    apiStrategyPostRequest: ApiStrategyPostRequest;
}

/**
 * 
 */
export class StrategyApi extends runtime.BaseAPI {

    /**
     */
    async apiStrategyIdDeleteRaw(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdDelete(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiStrategyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdGetRaw(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoStrategyVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoStrategyVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdGet(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseIoSakurasouControllerVoStrategyVO> {
        const response = await this.apiStrategyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdPatchRaw(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        if (requestParameters['ioSakurasouControllerRequestStrategyPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'ioSakurasouControllerRequestStrategyPatchRequest',
                'Required parameter "ioSakurasouControllerRequestStrategyPatchRequest" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IoSakurasouControllerRequestStrategyPatchRequestToJSON(requestParameters['ioSakurasouControllerRequestStrategyPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdPatch(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiStrategyIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPageGetRaw(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoPageResultIoSakurasouControllerVoStrategyPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoPageResultIoSakurasouControllerVoStrategyPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPageGet(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoPageResultIoSakurasouControllerVoStrategyPageVO> {
        const response = await this.apiStrategyPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPostRaw(requestParameters: ApiStrategyPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoSakurasouControllerVoCommonResponseKotlinUnit>> {
        if (requestParameters['apiStrategyPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiStrategyPostRequest',
                'Required parameter "apiStrategyPostRequest" was null or undefined when calling apiStrategyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiStrategyPostRequestToJSON(requestParameters['apiStrategyPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoSakurasouControllerVoCommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPost(requestParameters: ApiStrategyPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoSakurasouControllerVoCommonResponseKotlinUnit> {
        const response = await this.apiStrategyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
