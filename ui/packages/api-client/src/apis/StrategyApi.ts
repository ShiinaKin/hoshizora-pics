/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonResponseKotlinUnit,
  CommonResponsePageResultStrategyPageVO,
  CommonResponseStrategyVO,
  StrategyInsertRequest,
  StrategyPatchRequest,
} from '../models/index';
import {
    CommonResponseKotlinUnitFromJSON,
    CommonResponseKotlinUnitToJSON,
    CommonResponsePageResultStrategyPageVOFromJSON,
    CommonResponsePageResultStrategyPageVOToJSON,
    CommonResponseStrategyVOFromJSON,
    CommonResponseStrategyVOToJSON,
    StrategyInsertRequestFromJSON,
    StrategyInsertRequestToJSON,
    StrategyPatchRequestFromJSON,
    StrategyPatchRequestToJSON,
} from '../models/index';

export interface ApiStrategyIdDeleteRequest {
    id: number;
}

export interface ApiStrategyIdGetRequest {
    id: number;
}

export interface ApiStrategyIdPatchRequest {
    id: number;
    strategyPatchRequest: StrategyPatchRequest;
}

export interface ApiStrategyPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiStrategyPostRequest {
    strategyInsertRequest: StrategyInsertRequest;
}

/**
 * 
 */
export class StrategyApi extends runtime.BaseAPI {

    /**
     */
    async apiStrategyIdDeleteRaw(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdDelete(requestParameters: ApiStrategyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiStrategyIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdGetRaw(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseStrategyVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseStrategyVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdGet(requestParameters: ApiStrategyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseStrategyVO> {
        const response = await this.apiStrategyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyIdPatchRaw(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        if (requestParameters['strategyPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'strategyPatchRequest',
                'Required parameter "strategyPatchRequest" was null or undefined when calling apiStrategyIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StrategyPatchRequestToJSON(requestParameters['strategyPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyIdPatch(requestParameters: ApiStrategyIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiStrategyIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPageGetRaw(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponsePageResultStrategyPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiStrategyPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponsePageResultStrategyPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPageGet(requestParameters: ApiStrategyPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponsePageResultStrategyPageVO> {
        const response = await this.apiStrategyPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStrategyPostRaw(requestParameters: ApiStrategyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['strategyInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'strategyInsertRequest',
                'Required parameter "strategyInsertRequest" was null or undefined when calling apiStrategyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/strategy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StrategyInsertRequestToJSON(requestParameters['strategyInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiStrategyPost(requestParameters: ApiStrategyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiStrategyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
