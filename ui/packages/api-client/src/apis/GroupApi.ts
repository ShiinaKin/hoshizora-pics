/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonResponseGroupAllowedImageType,
  CommonResponseGroupVO,
  CommonResponseKotlinUnit,
  CommonResponsePageResultGroupPageVO,
  GroupInsertRequest,
  GroupPatchRequest,
} from '../models/index';
import {
    CommonResponseGroupAllowedImageTypeFromJSON,
    CommonResponseGroupAllowedImageTypeToJSON,
    CommonResponseGroupVOFromJSON,
    CommonResponseGroupVOToJSON,
    CommonResponseKotlinUnitFromJSON,
    CommonResponseKotlinUnitToJSON,
    CommonResponsePageResultGroupPageVOFromJSON,
    CommonResponsePageResultGroupPageVOToJSON,
    GroupInsertRequestFromJSON,
    GroupInsertRequestToJSON,
    GroupPatchRequestFromJSON,
    GroupPatchRequestToJSON,
} from '../models/index';

export interface ApiGroupIdDeleteRequest {
    id: number;
}

export interface ApiGroupIdGetRequest {
    id: number;
}

export interface ApiGroupIdPatchRequest {
    id: number;
    groupPatchRequest: GroupPatchRequest;
}

export interface ApiGroupPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiGroupPostRequest {
    groupInsertRequest: GroupInsertRequest;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     */
    async apiGroupIdDeleteRaw(requestParameters: ApiGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdDelete(requestParameters: ApiGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiGroupIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupIdGetRaw(requestParameters: ApiGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseGroupVO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseGroupVOFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdGet(requestParameters: ApiGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseGroupVO> {
        const response = await this.apiGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupIdPatchRaw(requestParameters: ApiGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGroupIdPatch().'
            );
        }

        if (requestParameters['groupPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'groupPatchRequest',
                'Required parameter "groupPatchRequest" was null or undefined when calling apiGroupIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupPatchRequestToJSON(requestParameters['groupPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupIdPatch(requestParameters: ApiGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiGroupIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupPageGetRaw(requestParameters: ApiGroupPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponsePageResultGroupPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiGroupPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiGroupPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponsePageResultGroupPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupPageGet(requestParameters: ApiGroupPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponsePageResultGroupPageVO> {
        const response = await this.apiGroupPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupPostRaw(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['groupInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'groupInsertRequest',
                'Required parameter "groupInsertRequest" was null or undefined when calling apiGroupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupInsertRequestToJSON(requestParameters['groupInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupPost(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiGroupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGroupTypeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseGroupAllowedImageType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/group/type`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseGroupAllowedImageTypeFromJSON(jsonValue));
    }

    /**
     */
    async apiGroupTypeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseGroupAllowedImageType> {
        const response = await this.apiGroupTypeGetRaw(initOverrides);
        return await response.value();
    }

}
