/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlbumManageInsertRequest,
  AlbumManagePatchRequest,
  AlbumSelfInsertRequest,
  AlbumSelfPatchRequest,
  CommonResponseAlbumVO,
  CommonResponseKotlinUnit,
  CommonResponsePageResultAlbumPageVO,
} from '../models/index';
import {
    AlbumManageInsertRequestFromJSON,
    AlbumManageInsertRequestToJSON,
    AlbumManagePatchRequestFromJSON,
    AlbumManagePatchRequestToJSON,
    AlbumSelfInsertRequestFromJSON,
    AlbumSelfInsertRequestToJSON,
    AlbumSelfPatchRequestFromJSON,
    AlbumSelfPatchRequestToJSON,
    CommonResponseAlbumVOFromJSON,
    CommonResponseAlbumVOToJSON,
    CommonResponseKotlinUnitFromJSON,
    CommonResponseKotlinUnitToJSON,
    CommonResponsePageResultAlbumPageVOFromJSON,
    CommonResponsePageResultAlbumPageVOToJSON,
} from '../models/index';

export interface ApiAlbumAlbumIdDeleteRequest {
    albumId: number;
}

export interface ApiAlbumAlbumIdGetRequest {
    albumId: number;
}

export interface ApiAlbumAlbumIdPatchRequest {
    albumId: number;
    albumSelfPatchRequest: AlbumSelfPatchRequest;
}

export interface ApiAlbumManageAlbumIdDeleteRequest {
    albumId: number;
}

export interface ApiAlbumManageAlbumIdGetRequest {
    albumId: number;
}

export interface ApiAlbumManageAlbumIdPatchRequest {
    albumId: number;
    albumManagePatchRequest: AlbumManagePatchRequest;
}

export interface ApiAlbumManagePageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiAlbumManagePostRequest {
    albumManageInsertRequest: AlbumManageInsertRequest;
}

export interface ApiAlbumPageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiAlbumPostRequest {
    albumSelfInsertRequest: AlbumSelfInsertRequest;
}

/**
 * 
 */
export class AlbumApi extends runtime.BaseAPI {

    /**
     */
    async apiAlbumAlbumIdDeleteRaw(requestParameters: ApiAlbumAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumAlbumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumAlbumIdDelete(requestParameters: ApiAlbumAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiAlbumAlbumIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumAlbumIdGetRaw(requestParameters: ApiAlbumAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseAlbumVO>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumAlbumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseAlbumVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumAlbumIdGet(requestParameters: ApiAlbumAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseAlbumVO> {
        const response = await this.apiAlbumAlbumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumAlbumIdPatchRaw(requestParameters: ApiAlbumAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumAlbumIdPatch().'
            );
        }

        if (requestParameters['albumSelfPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'albumSelfPatchRequest',
                'Required parameter "albumSelfPatchRequest" was null or undefined when calling apiAlbumAlbumIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumSelfPatchRequestToJSON(requestParameters['albumSelfPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumAlbumIdPatch(requestParameters: ApiAlbumAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiAlbumAlbumIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManageAlbumIdDeleteRaw(requestParameters: ApiAlbumManageAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumManageAlbumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManageAlbumIdDelete(requestParameters: ApiAlbumManageAlbumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiAlbumManageAlbumIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManageAlbumIdGetRaw(requestParameters: ApiAlbumManageAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseAlbumVO>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumManageAlbumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseAlbumVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManageAlbumIdGet(requestParameters: ApiAlbumManageAlbumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseAlbumVO> {
        const response = await this.apiAlbumManageAlbumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManageAlbumIdPatchRaw(requestParameters: ApiAlbumManageAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['albumId'] == null) {
            throw new runtime.RequiredError(
                'albumId',
                'Required parameter "albumId" was null or undefined when calling apiAlbumManageAlbumIdPatch().'
            );
        }

        if (requestParameters['albumManagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'albumManagePatchRequest',
                'Required parameter "albumManagePatchRequest" was null or undefined when calling apiAlbumManageAlbumIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/{albumId}`.replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters['albumId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumManagePatchRequestToJSON(requestParameters['albumManagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManageAlbumIdPatch(requestParameters: ApiAlbumManageAlbumIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiAlbumManageAlbumIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManagePageGetRaw(requestParameters: ApiAlbumManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponsePageResultAlbumPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiAlbumManagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiAlbumManagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponsePageResultAlbumPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManagePageGet(requestParameters: ApiAlbumManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponsePageResultAlbumPageVO> {
        const response = await this.apiAlbumManagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumManagePostRaw(requestParameters: ApiAlbumManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['albumManageInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'albumManageInsertRequest',
                'Required parameter "albumManageInsertRequest" was null or undefined when calling apiAlbumManagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/manage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumManageInsertRequestToJSON(requestParameters['albumManageInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumManagePost(requestParameters: ApiAlbumManagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiAlbumManagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumPageGetRaw(requestParameters: ApiAlbumPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponsePageResultAlbumPageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiAlbumPageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiAlbumPageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponsePageResultAlbumPageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumPageGet(requestParameters: ApiAlbumPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponsePageResultAlbumPageVO> {
        const response = await this.apiAlbumPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAlbumPostRaw(requestParameters: ApiAlbumPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['albumSelfInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'albumSelfInsertRequest',
                'Required parameter "albumSelfInsertRequest" was null or undefined when calling apiAlbumPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumSelfInsertRequestToJSON(requestParameters['albumSelfInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiAlbumPost(requestParameters: ApiAlbumPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiAlbumPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
