/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommonResponseImageManageVO,
  CommonResponseImageVO,
  CommonResponseKotlinString,
  CommonResponseKotlinUnit,
  CommonResponsePageResultImagePageVO,
  ImageFileVO,
  ImageInsertRequest,
  ImageManagePatchRequest,
} from '../models/index';
import {
    CommonResponseImageManageVOFromJSON,
    CommonResponseImageManageVOToJSON,
    CommonResponseImageVOFromJSON,
    CommonResponseImageVOToJSON,
    CommonResponseKotlinStringFromJSON,
    CommonResponseKotlinStringToJSON,
    CommonResponseKotlinUnitFromJSON,
    CommonResponseKotlinUnitToJSON,
    CommonResponsePageResultImagePageVOFromJSON,
    CommonResponsePageResultImagePageVOToJSON,
    ImageFileVOFromJSON,
    ImageFileVOToJSON,
    ImageInsertRequestFromJSON,
    ImageInsertRequestToJSON,
    ImageManagePatchRequestFromJSON,
    ImageManagePatchRequestToJSON,
} from '../models/index';

export interface ApiImageImageIdDeleteRequest {
    imageId: number;
}

export interface ApiImageImageIdGetRequest {
    imageId: number;
}

export interface ApiImageImageIdInfoGetRequest {
    imageId: number;
}

export interface ApiImageImageIdPatchRequest {
    imageId: number;
    imageInsertRequest: ImageInsertRequest;
}

export interface ApiImageImageIdThumbnailGetRequest {
    imageId: number;
}

export interface ApiImageManageImageIdDeleteRequest {
    imageId: number;
}

export interface ApiImageManageImageIdGetRequest {
    imageId: number;
}

export interface ApiImageManageImageIdInfoGetRequest {
    imageId: number;
}

export interface ApiImageManageImageIdPatchRequest {
    imageId: number;
    imageManagePatchRequest: ImageManagePatchRequest;
}

export interface ApiImageManageImageIdThumbnailGetRequest {
    imageId: number;
}

export interface ApiImageManagePageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

export interface ApiImagePageGetRequest {
    page: number;
    pageSize: number;
    order?: string;
    orderBy?: string;
}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI {

    /**
     */
    async apiImageImageIdDeleteRaw(requestParameters: ApiImageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdDelete(requestParameters: ApiImageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiImageImageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdGetRaw(requestParameters: ApiImageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageFileVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFileVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdGet(requestParameters: ApiImageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageFileVO> {
        const response = await this.apiImageImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdInfoGetRaw(requestParameters: ApiImageImageIdInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseImageVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdInfoGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}/info`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseImageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdInfoGet(requestParameters: ApiImageImageIdInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseImageVO> {
        const response = await this.apiImageImageIdInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdPatchRaw(requestParameters: ApiImageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdPatch().'
            );
        }

        if (requestParameters['imageInsertRequest'] == null) {
            throw new runtime.RequiredError(
                'imageInsertRequest',
                'Required parameter "imageInsertRequest" was null or undefined when calling apiImageImageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ImageInsertRequestToJSON(requestParameters['imageInsertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdPatch(requestParameters: ApiImageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiImageImageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageImageIdThumbnailGetRaw(requestParameters: ApiImageImageIdThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageFileVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageImageIdThumbnailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/{imageId}/thumbnail`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFileVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageImageIdThumbnailGet(requestParameters: ApiImageImageIdThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageFileVO> {
        const response = await this.apiImageImageIdThumbnailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdDeleteRaw(requestParameters: ApiImageManageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdDelete(requestParameters: ApiImageManageImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiImageManageImageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdGetRaw(requestParameters: ApiImageManageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageFileVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFileVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdGet(requestParameters: ApiImageManageImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageFileVO> {
        const response = await this.apiImageManageImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdInfoGetRaw(requestParameters: ApiImageManageImageIdInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseImageManageVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdInfoGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}/info`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseImageManageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdInfoGet(requestParameters: ApiImageManageImageIdInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseImageManageVO> {
        const response = await this.apiImageManageImageIdInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdPatchRaw(requestParameters: ApiImageManageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinUnit>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdPatch().'
            );
        }

        if (requestParameters['imageManagePatchRequest'] == null) {
            throw new runtime.RequiredError(
                'imageManagePatchRequest',
                'Required parameter "imageManagePatchRequest" was null or undefined when calling apiImageManageImageIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ImageManagePatchRequestToJSON(requestParameters['imageManagePatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinUnitFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdPatch(requestParameters: ApiImageManageImageIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinUnit> {
        const response = await this.apiImageManageImageIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManageImageIdThumbnailGetRaw(requestParameters: ApiImageManageImageIdThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageFileVO>> {
        if (requestParameters['imageId'] == null) {
            throw new runtime.RequiredError(
                'imageId',
                'Required parameter "imageId" was null or undefined when calling apiImageManageImageIdThumbnailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/{imageId}/thumbnail`.replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters['imageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFileVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManageImageIdThumbnailGet(requestParameters: ApiImageManageImageIdThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageFileVO> {
        const response = await this.apiImageManageImageIdThumbnailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImageManagePageGetRaw(requestParameters: ApiImageManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponsePageResultImagePageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiImageManagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiImageManagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/manage/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponsePageResultImagePageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImageManagePageGet(requestParameters: ApiImageManagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponsePageResultImagePageVO> {
        const response = await this.apiImageManagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImagePageGetRaw(requestParameters: ApiImagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponsePageResultImagePageVO>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiImagePageGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiImagePageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponsePageResultImagePageVOFromJSON(jsonValue));
    }

    /**
     */
    async apiImagePageGet(requestParameters: ApiImagePageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponsePageResultImagePageVO> {
        const response = await this.apiImagePageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImagePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonResponseKotlinString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonResponseKotlinStringFromJSON(jsonValue));
    }

    /**
     */
    async apiImagePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonResponseKotlinString> {
        const response = await this.apiImagePostRaw(initOverrides);
        return await response.value();
    }

}
