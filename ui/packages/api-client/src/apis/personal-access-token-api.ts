/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonResponseKotlinString } from '../models';
// @ts-ignore
import type { CommonResponseKotlinUnit } from '../models';
// @ts-ignore
import type { CommonResponsePageResultPersonalAccessTokenPageVO } from '../models';
// @ts-ignore
import type { PersonalAccessTokenInsertRequest } from '../models';
// @ts-ignore
import type { PersonalAccessTokenPatchRequest } from '../models';
/**
 * PersonalAccessTokenApi - axios parameter creator
 * @export
 */
export const PersonalAccessTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {boolean} [isExpired] Whether the token is expired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, isExpired?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiPersonalAccessTokenPageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiPersonalAccessTokenPageGet', 'pageSize', pageSize)
            const localVarPath = `/api/personal-access-token/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (isExpired !== undefined) {
                localVarQueryParameter['isExpired'] = isExpired;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} patId Personal Access Token ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPatIdDelete: async (patId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patId' is not null or undefined
            assertParamExists('apiPersonalAccessTokenPatIdDelete', 'patId', patId)
            const localVarPath = `/api/personal-access-token/{patId}`
                .replace(`{${"patId"}}`, encodeURIComponent(String(patId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} patId Personal Access Token ID
         * @param {PersonalAccessTokenPatchRequest} personalAccessTokenPatchRequest Personal Access Token Patch Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPatIdPatch: async (patId: number, personalAccessTokenPatchRequest: PersonalAccessTokenPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patId' is not null or undefined
            assertParamExists('apiPersonalAccessTokenPatIdPatch', 'patId', patId)
            // verify required parameter 'personalAccessTokenPatchRequest' is not null or undefined
            assertParamExists('apiPersonalAccessTokenPatIdPatch', 'personalAccessTokenPatchRequest', personalAccessTokenPatchRequest)
            const localVarPath = `/api/personal-access-token/{patId}`
                .replace(`{${"patId"}}`, encodeURIComponent(String(patId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personalAccessTokenPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PersonalAccessTokenInsertRequest} personalAccessTokenInsertRequest Personal Access Token Insert Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPost: async (personalAccessTokenInsertRequest: PersonalAccessTokenInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personalAccessTokenInsertRequest' is not null or undefined
            assertParamExists('apiPersonalAccessTokenPost', 'personalAccessTokenInsertRequest', personalAccessTokenInsertRequest)
            const localVarPath = `/api/personal-access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personalAccessTokenInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonalAccessTokenApi - functional programming interface
 * @export
 */
export const PersonalAccessTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonalAccessTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {boolean} [isExpired] Whether the token is expired
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalAccessTokenPageGet(page: number, pageSize: number, order?: string, orderBy?: string, isExpired?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultPersonalAccessTokenPageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalAccessTokenPageGet(page, pageSize, order, orderBy, isExpired, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalAccessTokenApi.apiPersonalAccessTokenPageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} patId Personal Access Token ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalAccessTokenPatIdDelete(patId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalAccessTokenPatIdDelete(patId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalAccessTokenApi.apiPersonalAccessTokenPatIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} patId Personal Access Token ID
         * @param {PersonalAccessTokenPatchRequest} personalAccessTokenPatchRequest Personal Access Token Patch Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalAccessTokenPatIdPatch(patId: number, personalAccessTokenPatchRequest: PersonalAccessTokenPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalAccessTokenPatIdPatch(patId, personalAccessTokenPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalAccessTokenApi.apiPersonalAccessTokenPatIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PersonalAccessTokenInsertRequest} personalAccessTokenInsertRequest Personal Access Token Insert Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalAccessTokenPost(personalAccessTokenInsertRequest: PersonalAccessTokenInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalAccessTokenPost(personalAccessTokenInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalAccessTokenApi.apiPersonalAccessTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonalAccessTokenApi - factory interface
 * @export
 */
export const PersonalAccessTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonalAccessTokenApiFp(configuration)
    return {
        /**
         * 
         * @param {PersonalAccessTokenApiApiPersonalAccessTokenPageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPageGet(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultPersonalAccessTokenPageVO> {
            return localVarFp.apiPersonalAccessTokenPageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.isExpired, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PersonalAccessTokenApiApiPersonalAccessTokenPatIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPatIdDelete(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPatIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiPersonalAccessTokenPatIdDelete(requestParameters.patId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPatIdPatch(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiPersonalAccessTokenPatIdPatch(requestParameters.patId, requestParameters.personalAccessTokenPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PersonalAccessTokenApiApiPersonalAccessTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalAccessTokenPost(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinString> {
            return localVarFp.apiPersonalAccessTokenPost(requestParameters.personalAccessTokenInsertRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiPersonalAccessTokenPageGet operation in PersonalAccessTokenApi.
 * @export
 * @interface PersonalAccessTokenApiApiPersonalAccessTokenPageGetRequest
 */
export interface PersonalAccessTokenApiApiPersonalAccessTokenPageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPageGet
     */
    readonly orderBy?: string

    /**
     * Whether the token is expired
     * @type {boolean}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPageGet
     */
    readonly isExpired?: boolean
}

/**
 * Request parameters for apiPersonalAccessTokenPatIdDelete operation in PersonalAccessTokenApi.
 * @export
 * @interface PersonalAccessTokenApiApiPersonalAccessTokenPatIdDeleteRequest
 */
export interface PersonalAccessTokenApiApiPersonalAccessTokenPatIdDeleteRequest {
    /**
     * Personal Access Token ID
     * @type {number}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPatIdDelete
     */
    readonly patId: number
}

/**
 * Request parameters for apiPersonalAccessTokenPatIdPatch operation in PersonalAccessTokenApi.
 * @export
 * @interface PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatchRequest
 */
export interface PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatchRequest {
    /**
     * Personal Access Token ID
     * @type {number}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatch
     */
    readonly patId: number

    /**
     * Personal Access Token Patch Request
     * @type {PersonalAccessTokenPatchRequest}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatch
     */
    readonly personalAccessTokenPatchRequest: PersonalAccessTokenPatchRequest
}

/**
 * Request parameters for apiPersonalAccessTokenPost operation in PersonalAccessTokenApi.
 * @export
 * @interface PersonalAccessTokenApiApiPersonalAccessTokenPostRequest
 */
export interface PersonalAccessTokenApiApiPersonalAccessTokenPostRequest {
    /**
     * Personal Access Token Insert Request
     * @type {PersonalAccessTokenInsertRequest}
     * @memberof PersonalAccessTokenApiApiPersonalAccessTokenPost
     */
    readonly personalAccessTokenInsertRequest: PersonalAccessTokenInsertRequest
}

/**
 * PersonalAccessTokenApi - object-oriented interface
 * @export
 * @class PersonalAccessTokenApi
 * @extends {BaseAPI}
 */
export class PersonalAccessTokenApi extends BaseAPI {
    /**
     * 
     * @param {PersonalAccessTokenApiApiPersonalAccessTokenPageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokenApi
     */
    public apiPersonalAccessTokenPageGet(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPageGetRequest, options?: RawAxiosRequestConfig) {
        return PersonalAccessTokenApiFp(this.configuration).apiPersonalAccessTokenPageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.isExpired, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonalAccessTokenApiApiPersonalAccessTokenPatIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokenApi
     */
    public apiPersonalAccessTokenPatIdDelete(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPatIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PersonalAccessTokenApiFp(this.configuration).apiPersonalAccessTokenPatIdDelete(requestParameters.patId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokenApi
     */
    public apiPersonalAccessTokenPatIdPatch(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPatIdPatchRequest, options?: RawAxiosRequestConfig) {
        return PersonalAccessTokenApiFp(this.configuration).apiPersonalAccessTokenPatIdPatch(requestParameters.patId, requestParameters.personalAccessTokenPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonalAccessTokenApiApiPersonalAccessTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokenApi
     */
    public apiPersonalAccessTokenPost(requestParameters: PersonalAccessTokenApiApiPersonalAccessTokenPostRequest, options?: RawAxiosRequestConfig) {
        return PersonalAccessTokenApiFp(this.configuration).apiPersonalAccessTokenPost(requestParameters.personalAccessTokenInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

