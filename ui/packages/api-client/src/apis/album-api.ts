/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AlbumManageInsertRequest } from '../models';
// @ts-ignore
import type { AlbumManagePatchRequest } from '../models';
// @ts-ignore
import type { AlbumSelfInsertRequest } from '../models';
// @ts-ignore
import type { AlbumSelfPatchRequest } from '../models';
// @ts-ignore
import type { CommonResponseAlbumManageVO } from '../models';
// @ts-ignore
import type { CommonResponseAlbumVO } from '../models';
// @ts-ignore
import type { CommonResponseKotlinUnit } from '../models';
// @ts-ignore
import type { CommonResponsePageResultAlbumManagePageVO } from '../models';
// @ts-ignore
import type { CommonResponsePageResultAlbumPageVO } from '../models';
/**
 * AlbumApi - axios parameter creator
 * @export
 */
export const AlbumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumAlbumIdDelete: async (albumId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('apiAlbumAlbumIdDelete', 'albumId', albumId)
            const localVarPath = `/api/album/{albumId}`
                .replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumAlbumIdGet: async (albumId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('apiAlbumAlbumIdGet', 'albumId', albumId)
            const localVarPath = `/api/album/{albumId}`
                .replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {AlbumSelfPatchRequest} albumSelfPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumAlbumIdPatch: async (albumId: number, albumSelfPatchRequest: AlbumSelfPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('apiAlbumAlbumIdPatch', 'albumId', albumId)
            // verify required parameter 'albumSelfPatchRequest' is not null or undefined
            assertParamExists('apiAlbumAlbumIdPatch', 'albumSelfPatchRequest', albumSelfPatchRequest)
            const localVarPath = `/api/album/{albumId}`
                .replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumSelfPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManageAlbumIdDelete: async (albumId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('apiAlbumManageAlbumIdDelete', 'albumId', albumId)
            const localVarPath = `/api/album/manage/{albumId}`
                .replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManageAlbumIdGet: async (albumId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('apiAlbumManageAlbumIdGet', 'albumId', albumId)
            const localVarPath = `/api/album/manage/{albumId}`
                .replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {AlbumManagePatchRequest} albumManagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManageAlbumIdPatch: async (albumId: number, albumManagePatchRequest: AlbumManagePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumId' is not null or undefined
            assertParamExists('apiAlbumManageAlbumIdPatch', 'albumId', albumId)
            // verify required parameter 'albumManagePatchRequest' is not null or undefined
            assertParamExists('apiAlbumManageAlbumIdPatch', 'albumManagePatchRequest', albumManagePatchRequest)
            const localVarPath = `/api/album/manage/{albumId}`
                .replace(`{${"albumId"}}`, encodeURIComponent(String(albumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumManagePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {number} [userId] userId
         * @param {string} [albumName] search albumName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManagePageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, userId?: number, albumName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiAlbumManagePageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiAlbumManagePageGet', 'pageSize', pageSize)
            const localVarPath = `/api/album/manage/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (albumName !== undefined) {
                localVarQueryParameter['albumName'] = albumName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AlbumManageInsertRequest} albumManageInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManagePost: async (albumManageInsertRequest: AlbumManageInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumManageInsertRequest' is not null or undefined
            assertParamExists('apiAlbumManagePost', 'albumManageInsertRequest', albumManageInsertRequest)
            const localVarPath = `/api/album/manage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumManageInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {string} [albumName] search albumName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumPageGet: async (page: number, pageSize: number, order?: string, orderBy?: string, albumName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiAlbumPageGet', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('apiAlbumPageGet', 'pageSize', pageSize)
            const localVarPath = `/api/album/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (albumName !== undefined) {
                localVarQueryParameter['albumName'] = albumName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AlbumSelfInsertRequest} albumSelfInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumPost: async (albumSelfInsertRequest: AlbumSelfInsertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumSelfInsertRequest' is not null or undefined
            assertParamExists('apiAlbumPost', 'albumSelfInsertRequest', albumSelfInsertRequest)
            const localVarPath = `/api/album`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumSelfInsertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumApi - functional programming interface
 * @export
 */
export const AlbumApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumAlbumIdDelete(albumId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumAlbumIdDelete(albumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumAlbumIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumAlbumIdGet(albumId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseAlbumVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumAlbumIdGet(albumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumAlbumIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {AlbumSelfPatchRequest} albumSelfPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumAlbumIdPatch(albumId: number, albumSelfPatchRequest: AlbumSelfPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumAlbumIdPatch(albumId, albumSelfPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumAlbumIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumManageAlbumIdDelete(albumId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumManageAlbumIdDelete(albumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumManageAlbumIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumManageAlbumIdGet(albumId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseAlbumManageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumManageAlbumIdGet(albumId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumManageAlbumIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} albumId album id
         * @param {AlbumManagePatchRequest} albumManagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumManageAlbumIdPatch(albumId: number, albumManagePatchRequest: AlbumManagePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumManageAlbumIdPatch(albumId, albumManagePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumManageAlbumIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {number} [userId] userId
         * @param {string} [albumName] search albumName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumManagePageGet(page: number, pageSize: number, order?: string, orderBy?: string, userId?: number, albumName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultAlbumManagePageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumManagePageGet(page, pageSize, order, orderBy, userId, albumName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumManagePageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AlbumManageInsertRequest} albumManageInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumManagePost(albumManageInsertRequest: AlbumManageInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumManagePost(albumManageInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumManagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page page
         * @param {number} pageSize pageSize
         * @param {string} [order] order
         * @param {string} [orderBy] orderBy
         * @param {string} [albumName] search albumName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumPageGet(page: number, pageSize: number, order?: string, orderBy?: string, albumName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageResultAlbumPageVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumPageGet(page, pageSize, order, orderBy, albumName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumPageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AlbumSelfInsertRequest} albumSelfInsertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlbumPost(albumSelfInsertRequest: AlbumSelfInsertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseKotlinUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlbumPost(albumSelfInsertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.apiAlbumPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlbumApi - factory interface
 * @export
 */
export const AlbumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumApiFp(configuration)
    return {
        /**
         * 
         * @param {AlbumApiApiAlbumAlbumIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumAlbumIdDelete(requestParameters: AlbumApiApiAlbumAlbumIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiAlbumAlbumIdDelete(requestParameters.albumId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumAlbumIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumAlbumIdGet(requestParameters: AlbumApiApiAlbumAlbumIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseAlbumVO> {
            return localVarFp.apiAlbumAlbumIdGet(requestParameters.albumId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumAlbumIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumAlbumIdPatch(requestParameters: AlbumApiApiAlbumAlbumIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiAlbumAlbumIdPatch(requestParameters.albumId, requestParameters.albumSelfPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumManageAlbumIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManageAlbumIdDelete(requestParameters: AlbumApiApiAlbumManageAlbumIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiAlbumManageAlbumIdDelete(requestParameters.albumId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumManageAlbumIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManageAlbumIdGet(requestParameters: AlbumApiApiAlbumManageAlbumIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseAlbumManageVO> {
            return localVarFp.apiAlbumManageAlbumIdGet(requestParameters.albumId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumManageAlbumIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManageAlbumIdPatch(requestParameters: AlbumApiApiAlbumManageAlbumIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiAlbumManageAlbumIdPatch(requestParameters.albumId, requestParameters.albumManagePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumManagePageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManagePageGet(requestParameters: AlbumApiApiAlbumManagePageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultAlbumManagePageVO> {
            return localVarFp.apiAlbumManagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.userId, requestParameters.albumName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumManagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumManagePost(requestParameters: AlbumApiApiAlbumManagePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiAlbumManagePost(requestParameters.albumManageInsertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumPageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumPageGet(requestParameters: AlbumApiApiAlbumPageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageResultAlbumPageVO> {
            return localVarFp.apiAlbumPageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.albumName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlbumApiApiAlbumPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlbumPost(requestParameters: AlbumApiApiAlbumPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseKotlinUnit> {
            return localVarFp.apiAlbumPost(requestParameters.albumSelfInsertRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAlbumAlbumIdDelete operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumAlbumIdDeleteRequest
 */
export interface AlbumApiApiAlbumAlbumIdDeleteRequest {
    /**
     * album id
     * @type {number}
     * @memberof AlbumApiApiAlbumAlbumIdDelete
     */
    readonly albumId: number
}

/**
 * Request parameters for apiAlbumAlbumIdGet operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumAlbumIdGetRequest
 */
export interface AlbumApiApiAlbumAlbumIdGetRequest {
    /**
     * album id
     * @type {number}
     * @memberof AlbumApiApiAlbumAlbumIdGet
     */
    readonly albumId: number
}

/**
 * Request parameters for apiAlbumAlbumIdPatch operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumAlbumIdPatchRequest
 */
export interface AlbumApiApiAlbumAlbumIdPatchRequest {
    /**
     * album id
     * @type {number}
     * @memberof AlbumApiApiAlbumAlbumIdPatch
     */
    readonly albumId: number

    /**
     * 
     * @type {AlbumSelfPatchRequest}
     * @memberof AlbumApiApiAlbumAlbumIdPatch
     */
    readonly albumSelfPatchRequest: AlbumSelfPatchRequest
}

/**
 * Request parameters for apiAlbumManageAlbumIdDelete operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumManageAlbumIdDeleteRequest
 */
export interface AlbumApiApiAlbumManageAlbumIdDeleteRequest {
    /**
     * album id
     * @type {number}
     * @memberof AlbumApiApiAlbumManageAlbumIdDelete
     */
    readonly albumId: number
}

/**
 * Request parameters for apiAlbumManageAlbumIdGet operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumManageAlbumIdGetRequest
 */
export interface AlbumApiApiAlbumManageAlbumIdGetRequest {
    /**
     * album id
     * @type {number}
     * @memberof AlbumApiApiAlbumManageAlbumIdGet
     */
    readonly albumId: number
}

/**
 * Request parameters for apiAlbumManageAlbumIdPatch operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumManageAlbumIdPatchRequest
 */
export interface AlbumApiApiAlbumManageAlbumIdPatchRequest {
    /**
     * album id
     * @type {number}
     * @memberof AlbumApiApiAlbumManageAlbumIdPatch
     */
    readonly albumId: number

    /**
     * 
     * @type {AlbumManagePatchRequest}
     * @memberof AlbumApiApiAlbumManageAlbumIdPatch
     */
    readonly albumManagePatchRequest: AlbumManagePatchRequest
}

/**
 * Request parameters for apiAlbumManagePageGet operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumManagePageGetRequest
 */
export interface AlbumApiApiAlbumManagePageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof AlbumApiApiAlbumManagePageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof AlbumApiApiAlbumManagePageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof AlbumApiApiAlbumManagePageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof AlbumApiApiAlbumManagePageGet
     */
    readonly orderBy?: string

    /**
     * userId
     * @type {number}
     * @memberof AlbumApiApiAlbumManagePageGet
     */
    readonly userId?: number

    /**
     * search albumName
     * @type {string}
     * @memberof AlbumApiApiAlbumManagePageGet
     */
    readonly albumName?: string
}

/**
 * Request parameters for apiAlbumManagePost operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumManagePostRequest
 */
export interface AlbumApiApiAlbumManagePostRequest {
    /**
     * 
     * @type {AlbumManageInsertRequest}
     * @memberof AlbumApiApiAlbumManagePost
     */
    readonly albumManageInsertRequest: AlbumManageInsertRequest
}

/**
 * Request parameters for apiAlbumPageGet operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumPageGetRequest
 */
export interface AlbumApiApiAlbumPageGetRequest {
    /**
     * page
     * @type {number}
     * @memberof AlbumApiApiAlbumPageGet
     */
    readonly page: number

    /**
     * pageSize
     * @type {number}
     * @memberof AlbumApiApiAlbumPageGet
     */
    readonly pageSize: number

    /**
     * order
     * @type {string}
     * @memberof AlbumApiApiAlbumPageGet
     */
    readonly order?: string

    /**
     * orderBy
     * @type {string}
     * @memberof AlbumApiApiAlbumPageGet
     */
    readonly orderBy?: string

    /**
     * search albumName
     * @type {string}
     * @memberof AlbumApiApiAlbumPageGet
     */
    readonly albumName?: string
}

/**
 * Request parameters for apiAlbumPost operation in AlbumApi.
 * @export
 * @interface AlbumApiApiAlbumPostRequest
 */
export interface AlbumApiApiAlbumPostRequest {
    /**
     * 
     * @type {AlbumSelfInsertRequest}
     * @memberof AlbumApiApiAlbumPost
     */
    readonly albumSelfInsertRequest: AlbumSelfInsertRequest
}

/**
 * AlbumApi - object-oriented interface
 * @export
 * @class AlbumApi
 * @extends {BaseAPI}
 */
export class AlbumApi extends BaseAPI {
    /**
     * 
     * @param {AlbumApiApiAlbumAlbumIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumAlbumIdDelete(requestParameters: AlbumApiApiAlbumAlbumIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumAlbumIdDelete(requestParameters.albumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumAlbumIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumAlbumIdGet(requestParameters: AlbumApiApiAlbumAlbumIdGetRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumAlbumIdGet(requestParameters.albumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumAlbumIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumAlbumIdPatch(requestParameters: AlbumApiApiAlbumAlbumIdPatchRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumAlbumIdPatch(requestParameters.albumId, requestParameters.albumSelfPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumManageAlbumIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumManageAlbumIdDelete(requestParameters: AlbumApiApiAlbumManageAlbumIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumManageAlbumIdDelete(requestParameters.albumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumManageAlbumIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumManageAlbumIdGet(requestParameters: AlbumApiApiAlbumManageAlbumIdGetRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumManageAlbumIdGet(requestParameters.albumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumManageAlbumIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumManageAlbumIdPatch(requestParameters: AlbumApiApiAlbumManageAlbumIdPatchRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumManageAlbumIdPatch(requestParameters.albumId, requestParameters.albumManagePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumManagePageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumManagePageGet(requestParameters: AlbumApiApiAlbumManagePageGetRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumManagePageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.userId, requestParameters.albumName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumManagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumManagePost(requestParameters: AlbumApiApiAlbumManagePostRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumManagePost(requestParameters.albumManageInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumPageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumPageGet(requestParameters: AlbumApiApiAlbumPageGetRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumPageGet(requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.orderBy, requestParameters.albumName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlbumApiApiAlbumPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public apiAlbumPost(requestParameters: AlbumApiApiAlbumPostRequest, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).apiAlbumPost(requestParameters.albumSelfInsertRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

