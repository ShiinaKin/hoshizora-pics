/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { KotlinxDatetimeLocalTime } from './KotlinxDatetimeLocalTime';
import {
    KotlinxDatetimeLocalTimeFromJSON,
    KotlinxDatetimeLocalTimeFromJSONTyped,
    KotlinxDatetimeLocalTimeToJSON,
} from './KotlinxDatetimeLocalTime';
import type { KotlinxDatetimeLocalDate } from './KotlinxDatetimeLocalDate';
import {
    KotlinxDatetimeLocalDateFromJSON,
    KotlinxDatetimeLocalDateFromJSONTyped,
    KotlinxDatetimeLocalDateToJSON,
} from './KotlinxDatetimeLocalDate';
import type { JavaTimeMonth } from './JavaTimeMonth';
import {
    JavaTimeMonthFromJSON,
    JavaTimeMonthFromJSONTyped,
    JavaTimeMonthToJSON,
} from './JavaTimeMonth';
import type { JavaTimeDayOfWeek } from './JavaTimeDayOfWeek';
import {
    JavaTimeDayOfWeekFromJSON,
    JavaTimeDayOfWeekFromJSONTyped,
    JavaTimeDayOfWeekToJSON,
} from './JavaTimeDayOfWeek';

/**
 * 
 * @export
 * @interface KotlinxDatetimeLocalDateTime
 */
export interface KotlinxDatetimeLocalDateTime {
    /**
     * 
     * @type {KotlinxDatetimeLocalDate}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    date: KotlinxDatetimeLocalDate;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    dayOfMonth: number;
    /**
     * 
     * @type {JavaTimeDayOfWeek}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    dayOfWeek: JavaTimeDayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    dayOfYear: number;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    hour: number;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    minute: number;
    /**
     * 
     * @type {JavaTimeMonth}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    month: JavaTimeMonth;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    monthNumber: number;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    nanosecond: number;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    second: number;
    /**
     * 
     * @type {KotlinxDatetimeLocalTime}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    time: KotlinxDatetimeLocalTime;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDateTime
     */
    year: number;
}



/**
 * Check if a given object implements the KotlinxDatetimeLocalDateTime interface.
 */
export function instanceOfKotlinxDatetimeLocalDateTime(value: object): value is KotlinxDatetimeLocalDateTime {
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('dayOfMonth' in value) || value['dayOfMonth'] === undefined) return false;
    if (!('dayOfWeek' in value) || value['dayOfWeek'] === undefined) return false;
    if (!('dayOfYear' in value) || value['dayOfYear'] === undefined) return false;
    if (!('hour' in value) || value['hour'] === undefined) return false;
    if (!('minute' in value) || value['minute'] === undefined) return false;
    if (!('month' in value) || value['month'] === undefined) return false;
    if (!('monthNumber' in value) || value['monthNumber'] === undefined) return false;
    if (!('nanosecond' in value) || value['nanosecond'] === undefined) return false;
    if (!('second' in value) || value['second'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('year' in value) || value['year'] === undefined) return false;
    return true;
}

export function KotlinxDatetimeLocalDateTimeFromJSON(json: any): KotlinxDatetimeLocalDateTime {
    return KotlinxDatetimeLocalDateTimeFromJSONTyped(json, false);
}

export function KotlinxDatetimeLocalDateTimeFromJSONTyped(json: any, ignoreDiscriminator: boolean): KotlinxDatetimeLocalDateTime {
    if (json == null) {
        return json;
    }
    return {
        
        'date': KotlinxDatetimeLocalDateFromJSON(json['date']),
        'dayOfMonth': json['dayOfMonth'],
        'dayOfWeek': JavaTimeDayOfWeekFromJSON(json['dayOfWeek']),
        'dayOfYear': json['dayOfYear'],
        'hour': json['hour'],
        'minute': json['minute'],
        'month': JavaTimeMonthFromJSON(json['month']),
        'monthNumber': json['monthNumber'],
        'nanosecond': json['nanosecond'],
        'second': json['second'],
        'time': KotlinxDatetimeLocalTimeFromJSON(json['time']),
        'year': json['year'],
    };
}

export function KotlinxDatetimeLocalDateTimeToJSON(value?: KotlinxDatetimeLocalDateTime | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'date': KotlinxDatetimeLocalDateToJSON(value['date']),
        'dayOfMonth': value['dayOfMonth'],
        'dayOfWeek': JavaTimeDayOfWeekToJSON(value['dayOfWeek']),
        'dayOfYear': value['dayOfYear'],
        'hour': value['hour'],
        'minute': value['minute'],
        'month': JavaTimeMonthToJSON(value['month']),
        'monthNumber': value['monthNumber'],
        'nanosecond': value['nanosecond'],
        'second': value['second'],
        'time': KotlinxDatetimeLocalTimeToJSON(value['time']),
        'year': value['year'],
    };
}

