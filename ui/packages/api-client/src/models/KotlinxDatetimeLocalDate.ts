/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JavaTimeMonth } from './JavaTimeMonth';
import {
    JavaTimeMonthFromJSON,
    JavaTimeMonthFromJSONTyped,
    JavaTimeMonthToJSON,
    JavaTimeMonthToJSONTyped,
} from './JavaTimeMonth';
import type { JavaTimeDayOfWeek } from './JavaTimeDayOfWeek';
import {
    JavaTimeDayOfWeekFromJSON,
    JavaTimeDayOfWeekFromJSONTyped,
    JavaTimeDayOfWeekToJSON,
    JavaTimeDayOfWeekToJSONTyped,
} from './JavaTimeDayOfWeek';

/**
 * 
 * @export
 * @interface KotlinxDatetimeLocalDate
 */
export interface KotlinxDatetimeLocalDate {
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDate
     */
    dayOfMonth: number;
    /**
     * 
     * @type {JavaTimeDayOfWeek}
     * @memberof KotlinxDatetimeLocalDate
     */
    dayOfWeek: JavaTimeDayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDate
     */
    dayOfYear: number;
    /**
     * 
     * @type {JavaTimeMonth}
     * @memberof KotlinxDatetimeLocalDate
     */
    month: JavaTimeMonth;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDate
     */
    monthNumber: number;
    /**
     * 
     * @type {number}
     * @memberof KotlinxDatetimeLocalDate
     */
    year: number;
}



/**
 * Check if a given object implements the KotlinxDatetimeLocalDate interface.
 */
export function instanceOfKotlinxDatetimeLocalDate(value: object): value is KotlinxDatetimeLocalDate {
    if (!('dayOfMonth' in value) || value['dayOfMonth'] === undefined) return false;
    if (!('dayOfWeek' in value) || value['dayOfWeek'] === undefined) return false;
    if (!('dayOfYear' in value) || value['dayOfYear'] === undefined) return false;
    if (!('month' in value) || value['month'] === undefined) return false;
    if (!('monthNumber' in value) || value['monthNumber'] === undefined) return false;
    if (!('year' in value) || value['year'] === undefined) return false;
    return true;
}

export function KotlinxDatetimeLocalDateFromJSON(json: any): KotlinxDatetimeLocalDate {
    return KotlinxDatetimeLocalDateFromJSONTyped(json, false);
}

export function KotlinxDatetimeLocalDateFromJSONTyped(json: any, ignoreDiscriminator: boolean): KotlinxDatetimeLocalDate {
    if (json == null) {
        return json;
    }
    return {
        
        'dayOfMonth': json['dayOfMonth'],
        'dayOfWeek': JavaTimeDayOfWeekFromJSON(json['dayOfWeek']),
        'dayOfYear': json['dayOfYear'],
        'month': JavaTimeMonthFromJSON(json['month']),
        'monthNumber': json['monthNumber'],
        'year': json['year'],
    };
}

  export function KotlinxDatetimeLocalDateToJSON(json: any): KotlinxDatetimeLocalDate {
      return KotlinxDatetimeLocalDateToJSONTyped(json, false);
  }

  export function KotlinxDatetimeLocalDateToJSONTyped(value?: KotlinxDatetimeLocalDate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dayOfMonth': value['dayOfMonth'],
        'dayOfWeek': JavaTimeDayOfWeekToJSON(value['dayOfWeek']),
        'dayOfYear': value['dayOfYear'],
        'month': JavaTimeMonthToJSON(value['month']),
        'monthNumber': value['monthNumber'],
        'year': value['year'],
    };
}

