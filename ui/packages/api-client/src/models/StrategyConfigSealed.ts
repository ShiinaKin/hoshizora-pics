/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocalStrategy } from './LocalStrategy';
import {
    LocalStrategyFromJSON,
    LocalStrategyFromJSONTyped,
    LocalStrategyToJSON,
    LocalStrategyToJSONTyped,
} from './LocalStrategy';
import type { S3Strategy } from './S3Strategy';
import {
    S3StrategyFromJSON,
    S3StrategyFromJSONTyped,
    S3StrategyToJSON,
    S3StrategyToJSONTyped,
} from './S3Strategy';
import type { StrategyTypeEnum } from './StrategyTypeEnum';
import {
    StrategyTypeEnumFromJSON,
    StrategyTypeEnumFromJSONTyped,
    StrategyTypeEnumToJSON,
    StrategyTypeEnumToJSONTyped,
} from './StrategyTypeEnum';

/**
 * 
 * @export
 * @interface StrategyConfigSealed
 */
export interface StrategyConfigSealed {
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    thumbnailFolder: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    uploadFolder: string;
    /**
     * 
     * @type {StrategyTypeEnum}
     * @memberof StrategyConfigSealed
     */
    strategyType: StrategyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    accessKey: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    bucketName: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    endpoint: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    publicUrl: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    region: string;
    /**
     * 
     * @type {string}
     * @memberof StrategyConfigSealed
     */
    secretKey: string;
}



/**
 * Check if a given object implements the StrategyConfigSealed interface.
 */
export function instanceOfStrategyConfigSealed(value: object): value is StrategyConfigSealed {
    if (!('thumbnailFolder' in value) || value['thumbnailFolder'] === undefined) return false;
    if (!('uploadFolder' in value) || value['uploadFolder'] === undefined) return false;
    if (!('strategyType' in value) || value['strategyType'] === undefined) return false;
    if (!('accessKey' in value) || value['accessKey'] === undefined) return false;
    if (!('bucketName' in value) || value['bucketName'] === undefined) return false;
    if (!('endpoint' in value) || value['endpoint'] === undefined) return false;
    if (!('publicUrl' in value) || value['publicUrl'] === undefined) return false;
    if (!('region' in value) || value['region'] === undefined) return false;
    if (!('secretKey' in value) || value['secretKey'] === undefined) return false;
    return true;
}

export function StrategyConfigSealedFromJSON(json: any): StrategyConfigSealed {
    return StrategyConfigSealedFromJSONTyped(json, false);
}

export function StrategyConfigSealedFromJSONTyped(json: any, ignoreDiscriminator: boolean): StrategyConfigSealed {
    if (json == null) {
        return json;
    }
    return {
        
        'thumbnailFolder': json['thumbnailFolder'],
        'uploadFolder': json['uploadFolder'],
        'strategyType': StrategyTypeEnumFromJSON(json['strategyType']),
        'accessKey': json['accessKey'],
        'bucketName': json['bucketName'],
        'endpoint': json['endpoint'],
        'publicUrl': json['publicUrl'],
        'region': json['region'],
        'secretKey': json['secretKey'],
    };
}

  export function StrategyConfigSealedToJSON(json: any): StrategyConfigSealed {
      return StrategyConfigSealedToJSONTyped(json, false);
  }

  export function StrategyConfigSealedToJSONTyped(value?: StrategyConfigSealed | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'thumbnailFolder': value['thumbnailFolder'],
        'uploadFolder': value['uploadFolder'],
        'strategyType': StrategyTypeEnumToJSON(value['strategyType']),
        'accessKey': value['accessKey'],
        'bucketName': value['bucketName'],
        'endpoint': value['endpoint'],
        'publicUrl': value['publicUrl'],
        'region': value['region'],
        'secretKey': value['secretKey'],
    };
}

