/* tslint:disable */
/* eslint-disable */
/**
 * HoshizoraPics API
 * API for testing and demonstration purposes.
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ImageTypeEnum } from './ImageTypeEnum';
import {
    ImageTypeEnumFromJSON,
    ImageTypeEnumFromJSONTyped,
    ImageTypeEnumToJSON,
    ImageTypeEnumToJSONTyped,
} from './ImageTypeEnum';

/**
 * 
 * @export
 * @interface GroupStrategyConfig
 */
export interface GroupStrategyConfig {
    /**
     * 
     * @type {Set<ImageTypeEnum>}
     * @memberof GroupStrategyConfig
     */
    allowedImageTypes: Set<ImageTypeEnum>;
    /**
     * 
     * @type {string}
     * @memberof GroupStrategyConfig
     */
    fileNamingRule: string;
    /**
     * 
     * @type {ImageTypeEnum}
     * @memberof GroupStrategyConfig
     */
    imageAutoTransformTarget?: ImageTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof GroupStrategyConfig
     */
    imageQuality: number;
    /**
     * 
     * @type {number}
     * @memberof GroupStrategyConfig
     */
    maxSize: number;
    /**
     * 
     * @type {string}
     * @memberof GroupStrategyConfig
     */
    pathNamingRule: string;
    /**
     * 
     * @type {number}
     * @memberof GroupStrategyConfig
     */
    singleFileMaxSize: number;
}



/**
 * Check if a given object implements the GroupStrategyConfig interface.
 */
export function instanceOfGroupStrategyConfig(value: object): value is GroupStrategyConfig {
    if (!('allowedImageTypes' in value) || value['allowedImageTypes'] === undefined) return false;
    if (!('fileNamingRule' in value) || value['fileNamingRule'] === undefined) return false;
    if (!('imageQuality' in value) || value['imageQuality'] === undefined) return false;
    if (!('maxSize' in value) || value['maxSize'] === undefined) return false;
    if (!('pathNamingRule' in value) || value['pathNamingRule'] === undefined) return false;
    if (!('singleFileMaxSize' in value) || value['singleFileMaxSize'] === undefined) return false;
    return true;
}

export function GroupStrategyConfigFromJSON(json: any): GroupStrategyConfig {
    return GroupStrategyConfigFromJSONTyped(json, false);
}

export function GroupStrategyConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupStrategyConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'allowedImageTypes': (new Set((json['allowedImageTypes'] as Array<any>).map(ImageTypeEnumFromJSON))),
        'fileNamingRule': json['fileNamingRule'],
        'imageAutoTransformTarget': json['imageAutoTransformTarget'] == null ? undefined : ImageTypeEnumFromJSON(json['imageAutoTransformTarget']),
        'imageQuality': json['imageQuality'],
        'maxSize': json['maxSize'],
        'pathNamingRule': json['pathNamingRule'],
        'singleFileMaxSize': json['singleFileMaxSize'],
    };
}

  export function GroupStrategyConfigToJSON(json: any): GroupStrategyConfig {
      return GroupStrategyConfigToJSONTyped(json, false);
  }

  export function GroupStrategyConfigToJSONTyped(value?: GroupStrategyConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowedImageTypes': (Array.from(value['allowedImageTypes'] as Set<any>).map(ImageTypeEnumToJSON)),
        'fileNamingRule': value['fileNamingRule'],
        'imageAutoTransformTarget': ImageTypeEnumToJSON(value['imageAutoTransformTarget']),
        'imageQuality': value['imageQuality'],
        'maxSize': value['maxSize'],
        'pathNamingRule': value['pathNamingRule'],
        'singleFileMaxSize': value['singleFileMaxSize'],
    };
}

